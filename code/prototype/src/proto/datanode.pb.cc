// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanode.proto

#include "datanode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace datanode {
class RenameCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameCMD> _instance;
} _RenameCMD_default_instance_;
class CheckaliveCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckaliveCMD> _instance;
} _CheckaliveCMD_default_instance_;
class StripeIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeId> _instance;
} _StripeId_default_instance_;
class StripeLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeLocation> _instance;
} _StripeLocation_default_instance_;
class NodesLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodesLocation> _instance;
} _NodesLocation_default_instance_;
class ClearallstripeCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearallstripeCMD> _instance;
} _ClearallstripeCMD_default_instance_;
class DodownloadCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DodownloadCMD> _instance;
} _DodownloadCMD_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class OPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OP> _instance;
} _OP_default_instance_;
class StripeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeInfo> _instance;
} _StripeInfo_default_instance_;
class UploadCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadCMD> _instance;
} _UploadCMD_default_instance_;
class DownloadCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadCMD> _instance;
} _DownloadCMD_default_instance_;
class HandlePullCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandlePullCMD> _instance;
} _HandlePullCMD_default_instance_;
class HandlePushCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HandlePushCMD> _instance;
} _HandlePushCMD_default_instance_;
class RequestResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResult> _instance;
} _RequestResult_default_instance_;
}  // namespace datanode
static void InitDefaultsscc_info_CheckaliveCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_CheckaliveCMD_default_instance_;
    new (ptr) ::datanode::CheckaliveCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::CheckaliveCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckaliveCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckaliveCMD_datanode_2eproto}, {}};

static void InitDefaultsscc_info_ClearallstripeCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_ClearallstripeCMD_default_instance_;
    new (ptr) ::datanode::ClearallstripeCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::ClearallstripeCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearallstripeCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearallstripeCMD_datanode_2eproto}, {}};

static void InitDefaultsscc_info_DodownloadCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_DodownloadCMD_default_instance_;
    new (ptr) ::datanode::DodownloadCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::DodownloadCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DodownloadCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DodownloadCMD_datanode_2eproto}, {}};

static void InitDefaultsscc_info_DownloadCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_DownloadCMD_default_instance_;
    new (ptr) ::datanode::DownloadCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::DownloadCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DownloadCMD_datanode_2eproto}, {}};

static void InitDefaultsscc_info_HandlePullCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_HandlePullCMD_default_instance_;
    new (ptr) ::datanode::HandlePullCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::HandlePullCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandlePullCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HandlePullCMD_datanode_2eproto}, {}};

static void InitDefaultsscc_info_HandlePushCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_HandlePushCMD_default_instance_;
    new (ptr) ::datanode::HandlePushCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::HandlePushCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HandlePushCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HandlePushCMD_datanode_2eproto}, {}};

static void InitDefaultsscc_info_NodesLocation_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_NodesLocation_default_instance_;
    new (ptr) ::datanode::NodesLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::NodesLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodesLocation_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodesLocation_datanode_2eproto}, {}};

static void InitDefaultsscc_info_OP_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_OP_default_instance_;
    new (ptr) ::datanode::OP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::OP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OP_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OP_datanode_2eproto}, {}};

static void InitDefaultsscc_info_Path_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_Path_default_instance_;
    new (ptr) ::datanode::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Path_datanode_2eproto}, {}};

static void InitDefaultsscc_info_RenameCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_RenameCMD_default_instance_;
    new (ptr) ::datanode::RenameCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::RenameCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RenameCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RenameCMD_datanode_2eproto}, {}};

static void InitDefaultsscc_info_RequestResult_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_RequestResult_default_instance_;
    new (ptr) ::datanode::RequestResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::RequestResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestResult_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestResult_datanode_2eproto}, {}};

static void InitDefaultsscc_info_StripeId_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_StripeId_default_instance_;
    new (ptr) ::datanode::StripeId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::StripeId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeId_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeId_datanode_2eproto}, {}};

static void InitDefaultsscc_info_StripeInfo_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_StripeInfo_default_instance_;
    new (ptr) ::datanode::StripeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::StripeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeInfo_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeInfo_datanode_2eproto}, {}};

static void InitDefaultsscc_info_StripeLocation_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_StripeLocation_default_instance_;
    new (ptr) ::datanode::StripeLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::StripeLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeLocation_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeLocation_datanode_2eproto}, {}};

static void InitDefaultsscc_info_UploadCMD_datanode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datanode::_UploadCMD_default_instance_;
    new (ptr) ::datanode::UploadCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datanode::UploadCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadCMD_datanode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UploadCMD_datanode_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_datanode_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_datanode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_datanode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_datanode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::RenameCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::RenameCMD, oldid_),
  PROTOBUF_FIELD_OFFSET(::datanode::RenameCMD, newid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::CheckaliveCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::StripeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::StripeId, stripeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::StripeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::StripeLocation, dataloc_),
  PROTOBUF_FIELD_OFFSET(::datanode::StripeLocation, localparityloc_),
  PROTOBUF_FIELD_OFFSET(::datanode::StripeLocation, globalparityloc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, nodesuri_),
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, nodesstripeid_),
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, nodesblkid_),
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, ispart_),
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, targetstripeid_),
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, targetblks_),
  PROTOBUF_FIELD_OFFSET(::datanode::NodesLocation, aspart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::ClearallstripeCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, nodesuri_),
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, nodesstripeid_),
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, nodesblkid_),
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, targetstripeid_),
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, targetblks_),
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, ispart_),
  PROTOBUF_FIELD_OFFSET(::datanode::DodownloadCMD, aspart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::Path, dstpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::OP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::OP, from_),
  PROTOBUF_FIELD_OFFSET(::datanode::OP, to_),
  PROTOBUF_FIELD_OFFSET(::datanode::OP, op_),
  PROTOBUF_FIELD_OFFSET(::datanode::OP, stripeid_),
  PROTOBUF_FIELD_OFFSET(::datanode::OP, multiby_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::StripeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::StripeInfo, stripeid_),
  PROTOBUF_FIELD_OFFSET(::datanode::StripeInfo, stripe_k_),
  PROTOBUF_FIELD_OFFSET(::datanode::StripeInfo, stripe_l_),
  PROTOBUF_FIELD_OFFSET(::datanode::StripeInfo, stripe_g_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::UploadCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::UploadCMD, aspart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::DownloadCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::DownloadCMD, aspart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::HandlePullCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::HandlePullCMD, aspart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::HandlePushCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::HandlePushCMD, aspart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datanode::RequestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datanode::RequestResult, trueorfalse_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::datanode::RenameCMD)},
  { 7, -1, sizeof(::datanode::CheckaliveCMD)},
  { 12, -1, sizeof(::datanode::StripeId)},
  { 18, -1, sizeof(::datanode::StripeLocation)},
  { 26, -1, sizeof(::datanode::NodesLocation)},
  { 38, -1, sizeof(::datanode::ClearallstripeCMD)},
  { 43, -1, sizeof(::datanode::DodownloadCMD)},
  { 55, -1, sizeof(::datanode::Path)},
  { 61, -1, sizeof(::datanode::OP)},
  { 71, -1, sizeof(::datanode::StripeInfo)},
  { 80, -1, sizeof(::datanode::UploadCMD)},
  { 86, -1, sizeof(::datanode::DownloadCMD)},
  { 92, -1, sizeof(::datanode::HandlePullCMD)},
  { 98, -1, sizeof(::datanode::HandlePushCMD)},
  { 104, -1, sizeof(::datanode::RequestResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_RenameCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_CheckaliveCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_StripeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_StripeLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_NodesLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_ClearallstripeCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_DodownloadCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_OP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_StripeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_UploadCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_DownloadCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_HandlePullCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_HandlePushCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datanode::_RequestResult_default_instance_),
};

const char descriptor_table_protodef_datanode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016datanode.proto\022\010datanode\")\n\tRenameCMD\022"
  "\r\n\005oldid\030\001 \001(\005\022\r\n\005newid\030\002 \001(\005\"\017\n\rCheckal"
  "iveCMD\"\034\n\010StripeId\022\020\n\010stripeid\030\001 \001(\005\"R\n\016"
  "StripeLocation\022\017\n\007dataLoc\030\001 \003(\t\022\026\n\016local"
  "parityLoc\030\002 \003(\t\022\027\n\017globalparityLoc\030\003 \003(\t"
  "\"\230\001\n\rNodesLocation\022\020\n\010NodesUri\030\001 \003(\t\022\025\n\r"
  "NodesStripeId\030\002 \003(\005\022\022\n\nNodesBlkId\030\003 \003(\005\022"
  "\016\n\006IsPart\030\004 \003(\010\022\026\n\016TargetStripeId\030\005 \001(\005\022"
  "\022\n\nTargetBlks\030\006 \001(\005\022\016\n\006AsPart\030\007 \001(\010\"\023\n\021C"
  "learallstripeCMD\"\230\001\n\rDodownloadCMD\022\020\n\010No"
  "desUri\030\001 \001(\t\022\025\n\rNodesStripeId\030\002 \001(\005\022\022\n\nN"
  "odesBlkId\030\003 \001(\005\022\026\n\016TargetStripeId\030\004 \001(\005\022"
  "\022\n\nTargetBlks\030\005 \001(\005\022\016\n\006IsPart\030\006 \001(\010\022\016\n\006A"
  "sPart\030\007 \001(\010\"\027\n\004Path\022\017\n\007dstpath\030\001 \001(\t\"\234\001\n"
  "\002OP\022\014\n\004from\030\001 \003(\t\022\n\n\002to\030\002 \003(\t\022\036\n\002op\030\003 \001("
  "\0162\022.datanode.OP.CODEC\022\020\n\010stripeid\030\004 \001(\005\022"
  "\017\n\007multiby\030\005 \003(\005\"9\n\005CODEC\022\006\n\002NO\020\000\022\007\n\003XOR"
  "\020\001\022\007\n\003LRC\020\002\022\t\n\005REUSE\020\003\022\013\n\007PARTIAL\020\004\"T\n\nS"
  "tripeInfo\022\020\n\010stripeid\030\001 \001(\005\022\020\n\010stripe_k\030"
  "\002 \001(\005\022\020\n\010stripe_l\030\003 \001(\005\022\020\n\010stripe_g\030\004 \001("
  "\005\"\033\n\tUploadCMD\022\016\n\006AsPart\030\001 \001(\010\"\035\n\013Downlo"
  "adCMD\022\016\n\006AsPart\030\001 \001(\010\"\037\n\rHandlePullCMD\022\016"
  "\n\006AsPart\030\001 \001(\010\"\037\n\rHandlePushCMD\022\016\n\006AsPar"
  "t\030\001 \001(\010\"$\n\rRequestResult\022\023\n\013trueorfalse\030"
  "\001 \001(\0102\016\n\014FromDataNode2\335\006\n\016FromCoodinator"
  "\022<\n\014handleupload\022\023.datanode.UploadCMD\032\027."
  "datanode.RequestResult\022@\n\016handledownload"
  "\022\025.datanode.DownloadCMD\032\027.datanode.Reque"
  "stResult\022F\n\016clearallstripe\022\033.datanode.Cl"
  "earallstripeCMD\032\027.datanode.RequestResult"
  "\022>\n\ndodownload\022\027.datanode.DodownloadCMD\032"
  "\027.datanode.RequestResult\022C\n\017dopartialcod"
  "ing\022\027.datanode.NodesLocation\032\027.datanode."
  "RequestResult\022B\n\016doglobalcoding\022\027.datano"
  "de.NodesLocation\032\027.datanode.RequestResul"
  "t\022E\n\020docompleterepair\022\030.datanode.StripeL"
  "ocation\032\027.datanode.RequestResult\022:\n\013clea"
  "rstripe\022\022.datanode.StripeId\032\027.datanode.R"
  "equestResult\022>\n\ncheckalive\022\027.datanode.Ch"
  "eckaliveCMD\032\027.datanode.RequestResult\022>\n\n"
  "handlepull\022\027.datanode.HandlePullCMD\032\027.da"
  "tanode.RequestResult\022>\n\nhandlepush\022\027.dat"
  "anode.HandlePushCMD\032\027.datanode.RequestRe"
  "sult\022:\n\021pull_perform_push\022\014.datanode.OP\032"
  "\027.datanode.RequestResult\022;\n\013renameblock\022"
  "\023.datanode.RenameCMD\032\027.datanode.RequestR"
  "esult2\014\n\nFromClientb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_datanode_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_datanode_2eproto_sccs[15] = {
  &scc_info_CheckaliveCMD_datanode_2eproto.base,
  &scc_info_ClearallstripeCMD_datanode_2eproto.base,
  &scc_info_DodownloadCMD_datanode_2eproto.base,
  &scc_info_DownloadCMD_datanode_2eproto.base,
  &scc_info_HandlePullCMD_datanode_2eproto.base,
  &scc_info_HandlePushCMD_datanode_2eproto.base,
  &scc_info_NodesLocation_datanode_2eproto.base,
  &scc_info_OP_datanode_2eproto.base,
  &scc_info_Path_datanode_2eproto.base,
  &scc_info_RenameCMD_datanode_2eproto.base,
  &scc_info_RequestResult_datanode_2eproto.base,
  &scc_info_StripeId_datanode_2eproto.base,
  &scc_info_StripeInfo_datanode_2eproto.base,
  &scc_info_StripeLocation_datanode_2eproto.base,
  &scc_info_UploadCMD_datanode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_datanode_2eproto_once;
static bool descriptor_table_datanode_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datanode_2eproto = {
  &descriptor_table_datanode_2eproto_initialized, descriptor_table_protodef_datanode_2eproto, "datanode.proto", 1867,
  &descriptor_table_datanode_2eproto_once, descriptor_table_datanode_2eproto_sccs, descriptor_table_datanode_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_datanode_2eproto::offsets,
  file_level_metadata_datanode_2eproto, 15, file_level_enum_descriptors_datanode_2eproto, file_level_service_descriptors_datanode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_datanode_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_datanode_2eproto), true);
namespace datanode {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OP_CODEC_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datanode_2eproto);
  return file_level_enum_descriptors_datanode_2eproto[0];
}
bool OP_CODEC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OP_CODEC OP::NO;
constexpr OP_CODEC OP::XOR;
constexpr OP_CODEC OP::LRC;
constexpr OP_CODEC OP::REUSE;
constexpr OP_CODEC OP::PARTIAL;
constexpr OP_CODEC OP::CODEC_MIN;
constexpr OP_CODEC OP::CODEC_MAX;
constexpr int OP::CODEC_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RenameCMD::InitAsDefaultInstance() {
}
class RenameCMD::_Internal {
 public:
};

RenameCMD::RenameCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.RenameCMD)
}
RenameCMD::RenameCMD(const RenameCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oldid_, &from.oldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newid_) -
    reinterpret_cast<char*>(&oldid_)) + sizeof(newid_));
  // @@protoc_insertion_point(copy_constructor:datanode.RenameCMD)
}

void RenameCMD::SharedCtor() {
  ::memset(&oldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newid_) -
      reinterpret_cast<char*>(&oldid_)) + sizeof(newid_));
}

RenameCMD::~RenameCMD() {
  // @@protoc_insertion_point(destructor:datanode.RenameCMD)
  SharedDtor();
}

void RenameCMD::SharedDtor() {
}

void RenameCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameCMD& RenameCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void RenameCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.RenameCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&oldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newid_) -
      reinterpret_cast<char*>(&oldid_)) + sizeof(newid_));
  _internal_metadata_.Clear();
}

const char* RenameCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 oldid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          oldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 newid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          newid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.RenameCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 oldid = 1;
  if (this->oldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_oldid(), target);
  }

  // int32 newid = 2;
  if (this->newid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_newid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.RenameCMD)
  return target;
}

size_t RenameCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.RenameCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 oldid = 1;
  if (this->oldid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oldid());
  }

  // int32 newid = 2;
  if (this->newid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_newid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.RenameCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.RenameCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.RenameCMD)
    MergeFrom(*source);
  }
}

void RenameCMD::MergeFrom(const RenameCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.RenameCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.oldid() != 0) {
    _internal_set_oldid(from._internal_oldid());
  }
  if (from.newid() != 0) {
    _internal_set_newid(from._internal_newid());
  }
}

void RenameCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.RenameCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameCMD::CopyFrom(const RenameCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.RenameCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameCMD::IsInitialized() const {
  return true;
}

void RenameCMD::InternalSwap(RenameCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(oldid_, other->oldid_);
  swap(newid_, other->newid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckaliveCMD::InitAsDefaultInstance() {
}
class CheckaliveCMD::_Internal {
 public:
};

CheckaliveCMD::CheckaliveCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.CheckaliveCMD)
}
CheckaliveCMD::CheckaliveCMD(const CheckaliveCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datanode.CheckaliveCMD)
}

void CheckaliveCMD::SharedCtor() {
}

CheckaliveCMD::~CheckaliveCMD() {
  // @@protoc_insertion_point(destructor:datanode.CheckaliveCMD)
  SharedDtor();
}

void CheckaliveCMD::SharedDtor() {
}

void CheckaliveCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckaliveCMD& CheckaliveCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckaliveCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void CheckaliveCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.CheckaliveCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CheckaliveCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckaliveCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.CheckaliveCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.CheckaliveCMD)
  return target;
}

size_t CheckaliveCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.CheckaliveCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckaliveCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.CheckaliveCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckaliveCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckaliveCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.CheckaliveCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.CheckaliveCMD)
    MergeFrom(*source);
  }
}

void CheckaliveCMD::MergeFrom(const CheckaliveCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.CheckaliveCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckaliveCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.CheckaliveCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckaliveCMD::CopyFrom(const CheckaliveCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.CheckaliveCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckaliveCMD::IsInitialized() const {
  return true;
}

void CheckaliveCMD::InternalSwap(CheckaliveCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckaliveCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeId::InitAsDefaultInstance() {
}
class StripeId::_Internal {
 public:
};

StripeId::StripeId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.StripeId)
}
StripeId::StripeId(const StripeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stripeid_ = from.stripeid_;
  // @@protoc_insertion_point(copy_constructor:datanode.StripeId)
}

void StripeId::SharedCtor() {
  stripeid_ = 0;
}

StripeId::~StripeId() {
  // @@protoc_insertion_point(destructor:datanode.StripeId)
  SharedDtor();
}

void StripeId::SharedDtor() {
}

void StripeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeId& StripeId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeId_datanode_2eproto.base);
  return *internal_default_instance();
}


void StripeId::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stripeid_ = 0;
  _internal_metadata_.Clear();
}

const char* StripeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.StripeId)
  return target;
}

size_t StripeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.StripeId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.StripeId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.StripeId)
    MergeFrom(*source);
  }
}

void StripeId::MergeFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
}

void StripeId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeId::CopyFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeId::IsInitialized() const {
  return true;
}

void StripeId::InternalSwap(StripeId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeLocation::InitAsDefaultInstance() {
}
class StripeLocation::_Internal {
 public:
};

StripeLocation::StripeLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.StripeLocation)
}
StripeLocation::StripeLocation(const StripeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dataloc_(from.dataloc_),
      localparityloc_(from.localparityloc_),
      globalparityloc_(from.globalparityloc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datanode.StripeLocation)
}

void StripeLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripeLocation_datanode_2eproto.base);
}

StripeLocation::~StripeLocation() {
  // @@protoc_insertion_point(destructor:datanode.StripeLocation)
  SharedDtor();
}

void StripeLocation::SharedDtor() {
}

void StripeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeLocation& StripeLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeLocation_datanode_2eproto.base);
  return *internal_default_instance();
}


void StripeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataloc_.Clear();
  localparityloc_.Clear();
  globalparityloc_.Clear();
  _internal_metadata_.Clear();
}

const char* StripeLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dataLoc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.StripeLocation.dataLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string localparityLoc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_localparityloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.StripeLocation.localparityLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string globalparityLoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_globalparityloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.StripeLocation.globalparityLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataLoc = 1;
  for (int i = 0, n = this->_internal_dataloc_size(); i < n; i++) {
    const auto& s = this->_internal_dataloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.StripeLocation.dataLoc");
    target = stream->WriteString(1, s, target);
  }

  // repeated string localparityLoc = 2;
  for (int i = 0, n = this->_internal_localparityloc_size(); i < n; i++) {
    const auto& s = this->_internal_localparityloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.StripeLocation.localparityLoc");
    target = stream->WriteString(2, s, target);
  }

  // repeated string globalparityLoc = 3;
  for (int i = 0, n = this->_internal_globalparityloc_size(); i < n; i++) {
    const auto& s = this->_internal_globalparityloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.StripeLocation.globalparityLoc");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.StripeLocation)
  return target;
}

size_t StripeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.StripeLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataLoc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataloc_.size());
  for (int i = 0, n = dataloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataloc_.Get(i));
  }

  // repeated string localparityLoc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(localparityloc_.size());
  for (int i = 0, n = localparityloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      localparityloc_.Get(i));
  }

  // repeated string globalparityLoc = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(globalparityloc_.size());
  for (int i = 0, n = globalparityloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      globalparityloc_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.StripeLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.StripeLocation)
    MergeFrom(*source);
  }
}

void StripeLocation::MergeFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataloc_.MergeFrom(from.dataloc_);
  localparityloc_.MergeFrom(from.localparityloc_);
  globalparityloc_.MergeFrom(from.globalparityloc_);
}

void StripeLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeLocation::CopyFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeLocation::IsInitialized() const {
  return true;
}

void StripeLocation::InternalSwap(StripeLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dataloc_.InternalSwap(&other->dataloc_);
  localparityloc_.InternalSwap(&other->localparityloc_);
  globalparityloc_.InternalSwap(&other->globalparityloc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodesLocation::InitAsDefaultInstance() {
}
class NodesLocation::_Internal {
 public:
};

NodesLocation::NodesLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.NodesLocation)
}
NodesLocation::NodesLocation(const NodesLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodesuri_(from.nodesuri_),
      nodesstripeid_(from.nodesstripeid_),
      nodesblkid_(from.nodesblkid_),
      ispart_(from.ispart_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetstripeid_, &from.targetstripeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&aspart_) -
    reinterpret_cast<char*>(&targetstripeid_)) + sizeof(aspart_));
  // @@protoc_insertion_point(copy_constructor:datanode.NodesLocation)
}

void NodesLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodesLocation_datanode_2eproto.base);
  ::memset(&targetstripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aspart_) -
      reinterpret_cast<char*>(&targetstripeid_)) + sizeof(aspart_));
}

NodesLocation::~NodesLocation() {
  // @@protoc_insertion_point(destructor:datanode.NodesLocation)
  SharedDtor();
}

void NodesLocation::SharedDtor() {
}

void NodesLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodesLocation& NodesLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodesLocation_datanode_2eproto.base);
  return *internal_default_instance();
}


void NodesLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.NodesLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodesuri_.Clear();
  nodesstripeid_.Clear();
  nodesblkid_.Clear();
  ispart_.Clear();
  ::memset(&targetstripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aspart_) -
      reinterpret_cast<char*>(&targetstripeid_)) + sizeof(aspart_));
  _internal_metadata_.Clear();
}

const char* NodesLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string NodesUri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nodesuri();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.NodesLocation.NodesUri"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 NodesStripeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nodesstripeid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_nodesstripeid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 NodesBlkId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nodesblkid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_nodesblkid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool IsPart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_ispart(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_ispart(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetStripeId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targetstripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetBlks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          targetblks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AsPart = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          aspart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodesLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.NodesLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string NodesUri = 1;
  for (int i = 0, n = this->_internal_nodesuri_size(); i < n; i++) {
    const auto& s = this->_internal_nodesuri(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.NodesLocation.NodesUri");
    target = stream->WriteString(1, s, target);
  }

  // repeated int32 NodesStripeId = 2;
  {
    int byte_size = _nodesstripeid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_nodesstripeid(), byte_size, target);
    }
  }

  // repeated int32 NodesBlkId = 3;
  {
    int byte_size = _nodesblkid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_nodesblkid(), byte_size, target);
    }
  }

  // repeated bool IsPart = 4;
  if (this->_internal_ispart_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_ispart(), target);
  }

  // int32 TargetStripeId = 5;
  if (this->targetstripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_targetstripeid(), target);
  }

  // int32 TargetBlks = 6;
  if (this->targetblks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_targetblks(), target);
  }

  // bool AsPart = 7;
  if (this->aspart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_aspart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.NodesLocation)
  return target;
}

size_t NodesLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.NodesLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string NodesUri = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nodesuri_.size());
  for (int i = 0, n = nodesuri_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nodesuri_.Get(i));
  }

  // repeated int32 NodesStripeId = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nodesstripeid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nodesstripeid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 NodesBlkId = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nodesblkid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nodesblkid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool IsPart = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ispart_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ispart_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 TargetStripeId = 5;
  if (this->targetstripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetstripeid());
  }

  // int32 TargetBlks = 6;
  if (this->targetblks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetblks());
  }

  // bool AsPart = 7;
  if (this->aspart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodesLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.NodesLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const NodesLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodesLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.NodesLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.NodesLocation)
    MergeFrom(*source);
  }
}

void NodesLocation::MergeFrom(const NodesLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.NodesLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodesuri_.MergeFrom(from.nodesuri_);
  nodesstripeid_.MergeFrom(from.nodesstripeid_);
  nodesblkid_.MergeFrom(from.nodesblkid_);
  ispart_.MergeFrom(from.ispart_);
  if (from.targetstripeid() != 0) {
    _internal_set_targetstripeid(from._internal_targetstripeid());
  }
  if (from.targetblks() != 0) {
    _internal_set_targetblks(from._internal_targetblks());
  }
  if (from.aspart() != 0) {
    _internal_set_aspart(from._internal_aspart());
  }
}

void NodesLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.NodesLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesLocation::CopyFrom(const NodesLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.NodesLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesLocation::IsInitialized() const {
  return true;
}

void NodesLocation::InternalSwap(NodesLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodesuri_.InternalSwap(&other->nodesuri_);
  nodesstripeid_.InternalSwap(&other->nodesstripeid_);
  nodesblkid_.InternalSwap(&other->nodesblkid_);
  ispart_.InternalSwap(&other->ispart_);
  swap(targetstripeid_, other->targetstripeid_);
  swap(targetblks_, other->targetblks_);
  swap(aspart_, other->aspart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearallstripeCMD::InitAsDefaultInstance() {
}
class ClearallstripeCMD::_Internal {
 public:
};

ClearallstripeCMD::ClearallstripeCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.ClearallstripeCMD)
}
ClearallstripeCMD::ClearallstripeCMD(const ClearallstripeCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datanode.ClearallstripeCMD)
}

void ClearallstripeCMD::SharedCtor() {
}

ClearallstripeCMD::~ClearallstripeCMD() {
  // @@protoc_insertion_point(destructor:datanode.ClearallstripeCMD)
  SharedDtor();
}

void ClearallstripeCMD::SharedDtor() {
}

void ClearallstripeCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearallstripeCMD& ClearallstripeCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearallstripeCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void ClearallstripeCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.ClearallstripeCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ClearallstripeCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearallstripeCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.ClearallstripeCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.ClearallstripeCMD)
  return target;
}

size_t ClearallstripeCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.ClearallstripeCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearallstripeCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.ClearallstripeCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearallstripeCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearallstripeCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.ClearallstripeCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.ClearallstripeCMD)
    MergeFrom(*source);
  }
}

void ClearallstripeCMD::MergeFrom(const ClearallstripeCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.ClearallstripeCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearallstripeCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.ClearallstripeCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearallstripeCMD::CopyFrom(const ClearallstripeCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.ClearallstripeCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearallstripeCMD::IsInitialized() const {
  return true;
}

void ClearallstripeCMD::InternalSwap(ClearallstripeCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearallstripeCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DodownloadCMD::InitAsDefaultInstance() {
}
class DodownloadCMD::_Internal {
 public:
};

DodownloadCMD::DodownloadCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.DodownloadCMD)
}
DodownloadCMD::DodownloadCMD(const DodownloadCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodesuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodesuri().empty()) {
    nodesuri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodesuri_);
  }
  ::memcpy(&nodesstripeid_, &from.nodesstripeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&aspart_) -
    reinterpret_cast<char*>(&nodesstripeid_)) + sizeof(aspart_));
  // @@protoc_insertion_point(copy_constructor:datanode.DodownloadCMD)
}

void DodownloadCMD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DodownloadCMD_datanode_2eproto.base);
  nodesuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodesstripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aspart_) -
      reinterpret_cast<char*>(&nodesstripeid_)) + sizeof(aspart_));
}

DodownloadCMD::~DodownloadCMD() {
  // @@protoc_insertion_point(destructor:datanode.DodownloadCMD)
  SharedDtor();
}

void DodownloadCMD::SharedDtor() {
  nodesuri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DodownloadCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DodownloadCMD& DodownloadCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DodownloadCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void DodownloadCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.DodownloadCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodesuri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodesstripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aspart_) -
      reinterpret_cast<char*>(&nodesstripeid_)) + sizeof(aspart_));
  _internal_metadata_.Clear();
}

const char* DodownloadCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string NodesUri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodesuri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.DodownloadCMD.NodesUri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 NodesStripeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nodesstripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 NodesBlkId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nodesblkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetStripeId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          targetstripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetBlks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targetblks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsPart = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ispart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AsPart = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          aspart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DodownloadCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.DodownloadCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string NodesUri = 1;
  if (this->nodesuri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodesuri().data(), static_cast<int>(this->_internal_nodesuri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.DodownloadCMD.NodesUri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodesuri(), target);
  }

  // int32 NodesStripeId = 2;
  if (this->nodesstripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodesstripeid(), target);
  }

  // int32 NodesBlkId = 3;
  if (this->nodesblkid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nodesblkid(), target);
  }

  // int32 TargetStripeId = 4;
  if (this->targetstripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_targetstripeid(), target);
  }

  // int32 TargetBlks = 5;
  if (this->targetblks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_targetblks(), target);
  }

  // bool IsPart = 6;
  if (this->ispart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ispart(), target);
  }

  // bool AsPart = 7;
  if (this->aspart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_aspart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.DodownloadCMD)
  return target;
}

size_t DodownloadCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.DodownloadCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NodesUri = 1;
  if (this->nodesuri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodesuri());
  }

  // int32 NodesStripeId = 2;
  if (this->nodesstripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodesstripeid());
  }

  // int32 NodesBlkId = 3;
  if (this->nodesblkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodesblkid());
  }

  // int32 TargetStripeId = 4;
  if (this->targetstripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetstripeid());
  }

  // int32 TargetBlks = 5;
  if (this->targetblks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetblks());
  }

  // bool IsPart = 6;
  if (this->ispart() != 0) {
    total_size += 1 + 1;
  }

  // bool AsPart = 7;
  if (this->aspart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DodownloadCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.DodownloadCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const DodownloadCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DodownloadCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.DodownloadCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.DodownloadCMD)
    MergeFrom(*source);
  }
}

void DodownloadCMD::MergeFrom(const DodownloadCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.DodownloadCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodesuri().size() > 0) {

    nodesuri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodesuri_);
  }
  if (from.nodesstripeid() != 0) {
    _internal_set_nodesstripeid(from._internal_nodesstripeid());
  }
  if (from.nodesblkid() != 0) {
    _internal_set_nodesblkid(from._internal_nodesblkid());
  }
  if (from.targetstripeid() != 0) {
    _internal_set_targetstripeid(from._internal_targetstripeid());
  }
  if (from.targetblks() != 0) {
    _internal_set_targetblks(from._internal_targetblks());
  }
  if (from.ispart() != 0) {
    _internal_set_ispart(from._internal_ispart());
  }
  if (from.aspart() != 0) {
    _internal_set_aspart(from._internal_aspart());
  }
}

void DodownloadCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.DodownloadCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DodownloadCMD::CopyFrom(const DodownloadCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.DodownloadCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DodownloadCMD::IsInitialized() const {
  return true;
}

void DodownloadCMD::InternalSwap(DodownloadCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodesuri_.Swap(&other->nodesuri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nodesstripeid_, other->nodesstripeid_);
  swap(nodesblkid_, other->nodesblkid_);
  swap(targetstripeid_, other->targetstripeid_);
  swap(targetblks_, other->targetblks_);
  swap(ispart_, other->ispart_);
  swap(aspart_, other->aspart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DodownloadCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstpath().empty()) {
    dstpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dstpath_);
  }
  // @@protoc_insertion_point(copy_constructor:datanode.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_datanode_2eproto.base);
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:datanode.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_datanode_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dstpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dstpath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.Path.dstpath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dstpath = 1;
  if (this->dstpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.Path.dstpath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dstpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dstpath = 1;
  if (this->dstpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dstpath().size() > 0) {

    dstpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dstpath_);
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OP::InitAsDefaultInstance() {
}
class OP::_Internal {
 public:
};

OP::OP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.OP)
}
OP::OP(const OP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      from_(from.from_),
      to_(from.to_),
      multiby_(from.multiby_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&stripeid_) -
    reinterpret_cast<char*>(&op_)) + sizeof(stripeid_));
  // @@protoc_insertion_point(copy_constructor:datanode.OP)
}

void OP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OP_datanode_2eproto.base);
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripeid_) -
      reinterpret_cast<char*>(&op_)) + sizeof(stripeid_));
}

OP::~OP() {
  // @@protoc_insertion_point(destructor:datanode.OP)
  SharedDtor();
}

void OP::SharedDtor() {
}

void OP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OP& OP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OP_datanode_2eproto.base);
  return *internal_default_instance();
}


void OP::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.Clear();
  to_.Clear();
  multiby_.Clear();
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripeid_) -
      reinterpret_cast<char*>(&op_)) + sizeof(stripeid_));
  _internal_metadata_.Clear();
}

const char* OP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_from();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.OP.from"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_to();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "datanode.OP.to"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .datanode.OP.CODEC op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::datanode::OP_CODEC>(val));
        } else goto handle_unusual;
        continue;
      // int32 stripeid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 multiby = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_multiby(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_multiby(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string from = 1;
  for (int i = 0, n = this->_internal_from_size(); i < n; i++) {
    const auto& s = this->_internal_from(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.OP.from");
    target = stream->WriteString(1, s, target);
  }

  // repeated string to = 2;
  for (int i = 0, n = this->_internal_to_size(); i < n; i++) {
    const auto& s = this->_internal_to(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datanode.OP.to");
    target = stream->WriteString(2, s, target);
  }

  // .datanode.OP.CODEC op = 3;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_op(), target);
  }

  // int32 stripeid = 4;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stripeid(), target);
  }

  // repeated int32 multiby = 5;
  {
    int byte_size = _multiby_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_multiby(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.OP)
  return target;
}

size_t OP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.OP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string from = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(from_.size());
  for (int i = 0, n = from_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      from_.Get(i));
  }

  // repeated string to = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(to_.size());
  for (int i = 0, n = to_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      to_.Get(i));
  }

  // repeated int32 multiby = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->multiby_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _multiby_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .datanode.OP.CODEC op = 3;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  // int32 stripeid = 4;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.OP)
  GOOGLE_DCHECK_NE(&from, this);
  const OP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.OP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.OP)
    MergeFrom(*source);
  }
}

void OP::MergeFrom(const OP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.OP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  from_.MergeFrom(from.from_);
  to_.MergeFrom(from.to_);
  multiby_.MergeFrom(from.multiby_);
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
}

void OP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OP::CopyFrom(const OP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OP::IsInitialized() const {
  return true;
}

void OP::InternalSwap(OP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  from_.InternalSwap(&other->from_);
  to_.InternalSwap(&other->to_);
  multiby_.InternalSwap(&other->multiby_);
  swap(op_, other->op_);
  swap(stripeid_, other->stripeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeInfo::InitAsDefaultInstance() {
}
class StripeInfo::_Internal {
 public:
};

StripeInfo::StripeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.StripeInfo)
}
StripeInfo::StripeInfo(const StripeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stripeid_, &from.stripeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stripe_g_) -
    reinterpret_cast<char*>(&stripeid_)) + sizeof(stripe_g_));
  // @@protoc_insertion_point(copy_constructor:datanode.StripeInfo)
}

void StripeInfo::SharedCtor() {
  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripe_g_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(stripe_g_));
}

StripeInfo::~StripeInfo() {
  // @@protoc_insertion_point(destructor:datanode.StripeInfo)
  SharedDtor();
}

void StripeInfo::SharedDtor() {
}

void StripeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeInfo& StripeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeInfo_datanode_2eproto.base);
  return *internal_default_instance();
}


void StripeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripe_g_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(stripe_g_));
  _internal_metadata_.Clear();
}

const char* StripeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stripe_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stripe_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stripe_g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  // int32 stripe_k = 2;
  if (this->stripe_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stripe_k(), target);
  }

  // int32 stripe_l = 3;
  if (this->stripe_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stripe_l(), target);
  }

  // int32 stripe_g = 4;
  if (this->stripe_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stripe_g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.StripeInfo)
  return target;
}

size_t StripeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.StripeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  // int32 stripe_k = 2;
  if (this->stripe_k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_k());
  }

  // int32 stripe_l = 3;
  if (this->stripe_l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_l());
  }

  // int32 stripe_g = 4;
  if (this->stripe_g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_g());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.StripeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.StripeInfo)
    MergeFrom(*source);
  }
}

void StripeInfo::MergeFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
  if (from.stripe_k() != 0) {
    _internal_set_stripe_k(from._internal_stripe_k());
  }
  if (from.stripe_l() != 0) {
    _internal_set_stripe_l(from._internal_stripe_l());
  }
  if (from.stripe_g() != 0) {
    _internal_set_stripe_g(from._internal_stripe_g());
  }
}

void StripeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeInfo::CopyFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeInfo::IsInitialized() const {
  return true;
}

void StripeInfo::InternalSwap(StripeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
  swap(stripe_k_, other->stripe_k_);
  swap(stripe_l_, other->stripe_l_);
  swap(stripe_g_, other->stripe_g_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadCMD::InitAsDefaultInstance() {
}
class UploadCMD::_Internal {
 public:
};

UploadCMD::UploadCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.UploadCMD)
}
UploadCMD::UploadCMD(const UploadCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspart_ = from.aspart_;
  // @@protoc_insertion_point(copy_constructor:datanode.UploadCMD)
}

void UploadCMD::SharedCtor() {
  aspart_ = false;
}

UploadCMD::~UploadCMD() {
  // @@protoc_insertion_point(destructor:datanode.UploadCMD)
  SharedDtor();
}

void UploadCMD::SharedDtor() {
}

void UploadCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadCMD& UploadCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void UploadCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.UploadCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aspart_ = false;
  _internal_metadata_.Clear();
}

const char* UploadCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool AsPart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aspart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.UploadCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_aspart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.UploadCMD)
  return target;
}

size_t UploadCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.UploadCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.UploadCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.UploadCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.UploadCMD)
    MergeFrom(*source);
  }
}

void UploadCMD::MergeFrom(const UploadCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.UploadCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aspart() != 0) {
    _internal_set_aspart(from._internal_aspart());
  }
}

void UploadCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.UploadCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadCMD::CopyFrom(const UploadCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.UploadCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadCMD::IsInitialized() const {
  return true;
}

void UploadCMD::InternalSwap(UploadCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(aspart_, other->aspart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadCMD::InitAsDefaultInstance() {
}
class DownloadCMD::_Internal {
 public:
};

DownloadCMD::DownloadCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.DownloadCMD)
}
DownloadCMD::DownloadCMD(const DownloadCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspart_ = from.aspart_;
  // @@protoc_insertion_point(copy_constructor:datanode.DownloadCMD)
}

void DownloadCMD::SharedCtor() {
  aspart_ = false;
}

DownloadCMD::~DownloadCMD() {
  // @@protoc_insertion_point(destructor:datanode.DownloadCMD)
  SharedDtor();
}

void DownloadCMD::SharedDtor() {
}

void DownloadCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadCMD& DownloadCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void DownloadCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.DownloadCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aspart_ = false;
  _internal_metadata_.Clear();
}

const char* DownloadCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool AsPart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aspart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.DownloadCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_aspart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.DownloadCMD)
  return target;
}

size_t DownloadCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.DownloadCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.DownloadCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.DownloadCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.DownloadCMD)
    MergeFrom(*source);
  }
}

void DownloadCMD::MergeFrom(const DownloadCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.DownloadCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aspart() != 0) {
    _internal_set_aspart(from._internal_aspart());
  }
}

void DownloadCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.DownloadCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadCMD::CopyFrom(const DownloadCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.DownloadCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadCMD::IsInitialized() const {
  return true;
}

void DownloadCMD::InternalSwap(DownloadCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(aspart_, other->aspart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HandlePullCMD::InitAsDefaultInstance() {
}
class HandlePullCMD::_Internal {
 public:
};

HandlePullCMD::HandlePullCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.HandlePullCMD)
}
HandlePullCMD::HandlePullCMD(const HandlePullCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspart_ = from.aspart_;
  // @@protoc_insertion_point(copy_constructor:datanode.HandlePullCMD)
}

void HandlePullCMD::SharedCtor() {
  aspart_ = false;
}

HandlePullCMD::~HandlePullCMD() {
  // @@protoc_insertion_point(destructor:datanode.HandlePullCMD)
  SharedDtor();
}

void HandlePullCMD::SharedDtor() {
}

void HandlePullCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandlePullCMD& HandlePullCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandlePullCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void HandlePullCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.HandlePullCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aspart_ = false;
  _internal_metadata_.Clear();
}

const char* HandlePullCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool AsPart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aspart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandlePullCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.HandlePullCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_aspart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.HandlePullCMD)
  return target;
}

size_t HandlePullCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.HandlePullCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandlePullCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.HandlePullCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const HandlePullCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandlePullCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.HandlePullCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.HandlePullCMD)
    MergeFrom(*source);
  }
}

void HandlePullCMD::MergeFrom(const HandlePullCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.HandlePullCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aspart() != 0) {
    _internal_set_aspart(from._internal_aspart());
  }
}

void HandlePullCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.HandlePullCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandlePullCMD::CopyFrom(const HandlePullCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.HandlePullCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandlePullCMD::IsInitialized() const {
  return true;
}

void HandlePullCMD::InternalSwap(HandlePullCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(aspart_, other->aspart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandlePullCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HandlePushCMD::InitAsDefaultInstance() {
}
class HandlePushCMD::_Internal {
 public:
};

HandlePushCMD::HandlePushCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.HandlePushCMD)
}
HandlePushCMD::HandlePushCMD(const HandlePushCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspart_ = from.aspart_;
  // @@protoc_insertion_point(copy_constructor:datanode.HandlePushCMD)
}

void HandlePushCMD::SharedCtor() {
  aspart_ = false;
}

HandlePushCMD::~HandlePushCMD() {
  // @@protoc_insertion_point(destructor:datanode.HandlePushCMD)
  SharedDtor();
}

void HandlePushCMD::SharedDtor() {
}

void HandlePushCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandlePushCMD& HandlePushCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HandlePushCMD_datanode_2eproto.base);
  return *internal_default_instance();
}


void HandlePushCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.HandlePushCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aspart_ = false;
  _internal_metadata_.Clear();
}

const char* HandlePushCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool AsPart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          aspart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandlePushCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.HandlePushCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_aspart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.HandlePushCMD)
  return target;
}

size_t HandlePushCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.HandlePushCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool AsPart = 1;
  if (this->aspart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandlePushCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.HandlePushCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const HandlePushCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandlePushCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.HandlePushCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.HandlePushCMD)
    MergeFrom(*source);
  }
}

void HandlePushCMD::MergeFrom(const HandlePushCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.HandlePushCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aspart() != 0) {
    _internal_set_aspart(from._internal_aspart());
  }
}

void HandlePushCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.HandlePushCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandlePushCMD::CopyFrom(const HandlePushCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.HandlePushCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandlePushCMD::IsInitialized() const {
  return true;
}

void HandlePushCMD::InternalSwap(HandlePushCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(aspart_, other->aspart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandlePushCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestResult::InitAsDefaultInstance() {
}
class RequestResult::_Internal {
 public:
};

RequestResult::RequestResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datanode.RequestResult)
}
RequestResult::RequestResult(const RequestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trueorfalse_ = from.trueorfalse_;
  // @@protoc_insertion_point(copy_constructor:datanode.RequestResult)
}

void RequestResult::SharedCtor() {
  trueorfalse_ = false;
}

RequestResult::~RequestResult() {
  // @@protoc_insertion_point(destructor:datanode.RequestResult)
  SharedDtor();
}

void RequestResult::SharedDtor() {
}

void RequestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResult& RequestResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResult_datanode_2eproto.base);
  return *internal_default_instance();
}


void RequestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:datanode.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trueorfalse_ = false;
  _internal_metadata_.Clear();
}

const char* RequestResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool trueorfalse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trueorfalse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datanode.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_trueorfalse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datanode.RequestResult)
  return target;
}

size_t RequestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datanode.RequestResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datanode.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datanode.RequestResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datanode.RequestResult)
    MergeFrom(*source);
  }
}

void RequestResult::MergeFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datanode.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trueorfalse() != 0) {
    _internal_set_trueorfalse(from._internal_trueorfalse());
  }
}

void RequestResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datanode.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResult::CopyFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datanode.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResult::IsInitialized() const {
  return true;
}

void RequestResult::InternalSwap(RequestResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trueorfalse_, other->trueorfalse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace datanode
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datanode::RenameCMD* Arena::CreateMaybeMessage< ::datanode::RenameCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::RenameCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::CheckaliveCMD* Arena::CreateMaybeMessage< ::datanode::CheckaliveCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::CheckaliveCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::StripeId* Arena::CreateMaybeMessage< ::datanode::StripeId >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::StripeId >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::StripeLocation* Arena::CreateMaybeMessage< ::datanode::StripeLocation >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::StripeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::NodesLocation* Arena::CreateMaybeMessage< ::datanode::NodesLocation >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::NodesLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::ClearallstripeCMD* Arena::CreateMaybeMessage< ::datanode::ClearallstripeCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::ClearallstripeCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::DodownloadCMD* Arena::CreateMaybeMessage< ::datanode::DodownloadCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::DodownloadCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::Path* Arena::CreateMaybeMessage< ::datanode::Path >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::OP* Arena::CreateMaybeMessage< ::datanode::OP >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::OP >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::StripeInfo* Arena::CreateMaybeMessage< ::datanode::StripeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::StripeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::UploadCMD* Arena::CreateMaybeMessage< ::datanode::UploadCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::UploadCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::DownloadCMD* Arena::CreateMaybeMessage< ::datanode::DownloadCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::DownloadCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::HandlePullCMD* Arena::CreateMaybeMessage< ::datanode::HandlePullCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::HandlePullCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::HandlePushCMD* Arena::CreateMaybeMessage< ::datanode::HandlePushCMD >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::HandlePushCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::datanode::RequestResult* Arena::CreateMaybeMessage< ::datanode::RequestResult >(Arena* arena) {
  return Arena::CreateInternal< ::datanode::RequestResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
