// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_coordinator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_2eproto;
namespace coordinator {
class ListAllStripeCMD;
class ListAllStripeCMDDefaultTypeInternal;
extern ListAllStripeCMDDefaultTypeInternal _ListAllStripeCMD_default_instance_;
class NodesLocation;
class NodesLocationDefaultTypeInternal;
extern NodesLocationDefaultTypeInternal _NodesLocation_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class RequestResult;
class RequestResultDefaultTypeInternal;
extern RequestResultDefaultTypeInternal _RequestResult_default_instance_;
class SetPlacementPolicyCMD;
class SetPlacementPolicyCMDDefaultTypeInternal;
extern SetPlacementPolicyCMDDefaultTypeInternal _SetPlacementPolicyCMD_default_instance_;
class StripeDetail;
class StripeDetailDefaultTypeInternal;
extern StripeDetailDefaultTypeInternal _StripeDetail_default_instance_;
class StripeId;
class StripeIdDefaultTypeInternal;
extern StripeIdDefaultTypeInternal _StripeId_default_instance_;
class StripeIdWithHint;
class StripeIdWithHintDefaultTypeInternal;
extern StripeIdWithHintDefaultTypeInternal _StripeIdWithHint_default_instance_;
class StripeInfo;
class StripeInfoDefaultTypeInternal;
extern StripeInfoDefaultTypeInternal _StripeInfo_default_instance_;
class StripeLocation;
class StripeLocationDefaultTypeInternal;
extern StripeLocationDefaultTypeInternal _StripeLocation_default_instance_;
class TransitionUpCMD;
class TransitionUpCMDDefaultTypeInternal;
extern TransitionUpCMDDefaultTypeInternal _TransitionUpCMD_default_instance_;
}  // namespace coordinator
PROTOBUF_NAMESPACE_OPEN
template<> ::coordinator::ListAllStripeCMD* Arena::CreateMaybeMessage<::coordinator::ListAllStripeCMD>(Arena*);
template<> ::coordinator::NodesLocation* Arena::CreateMaybeMessage<::coordinator::NodesLocation>(Arena*);
template<> ::coordinator::Path* Arena::CreateMaybeMessage<::coordinator::Path>(Arena*);
template<> ::coordinator::RequestResult* Arena::CreateMaybeMessage<::coordinator::RequestResult>(Arena*);
template<> ::coordinator::SetPlacementPolicyCMD* Arena::CreateMaybeMessage<::coordinator::SetPlacementPolicyCMD>(Arena*);
template<> ::coordinator::StripeDetail* Arena::CreateMaybeMessage<::coordinator::StripeDetail>(Arena*);
template<> ::coordinator::StripeId* Arena::CreateMaybeMessage<::coordinator::StripeId>(Arena*);
template<> ::coordinator::StripeIdWithHint* Arena::CreateMaybeMessage<::coordinator::StripeIdWithHint>(Arena*);
template<> ::coordinator::StripeInfo* Arena::CreateMaybeMessage<::coordinator::StripeInfo>(Arena*);
template<> ::coordinator::StripeLocation* Arena::CreateMaybeMessage<::coordinator::StripeLocation>(Arena*);
template<> ::coordinator::TransitionUpCMD* Arena::CreateMaybeMessage<::coordinator::TransitionUpCMD>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace coordinator {

enum SetPlacementPolicyCMD_PLACE : int {
  SetPlacementPolicyCMD_PLACE_COMPACT = 0,
  SetPlacementPolicyCMD_PLACE_RANDOM = 1,
  SetPlacementPolicyCMD_PLACE_SPARSE = 2,
  SetPlacementPolicyCMD_PLACE_SetPlacementPolicyCMD_PLACE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetPlacementPolicyCMD_PLACE_SetPlacementPolicyCMD_PLACE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetPlacementPolicyCMD_PLACE_IsValid(int value);
constexpr SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD_PLACE_PLACE_MIN = SetPlacementPolicyCMD_PLACE_COMPACT;
constexpr SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD_PLACE_PLACE_MAX = SetPlacementPolicyCMD_PLACE_SPARSE;
constexpr int SetPlacementPolicyCMD_PLACE_PLACE_ARRAYSIZE = SetPlacementPolicyCMD_PLACE_PLACE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPlacementPolicyCMD_PLACE_descriptor();
template<typename T>
inline const std::string& SetPlacementPolicyCMD_PLACE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetPlacementPolicyCMD_PLACE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetPlacementPolicyCMD_PLACE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetPlacementPolicyCMD_PLACE_descriptor(), enum_t_value);
}
inline bool SetPlacementPolicyCMD_PLACE_Parse(
    const std::string& name, SetPlacementPolicyCMD_PLACE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetPlacementPolicyCMD_PLACE>(
    SetPlacementPolicyCMD_PLACE_descriptor(), name, value);
}
enum TransitionUpCMD_MODE : int {
  TransitionUpCMD_MODE_BASIC = 0,
  TransitionUpCMD_MODE_BASIC_PART = 1,
  TransitionUpCMD_MODE_DESIGNED = 2,
  TransitionUpCMD_MODE_TransitionUpCMD_MODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransitionUpCMD_MODE_TransitionUpCMD_MODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransitionUpCMD_MODE_IsValid(int value);
constexpr TransitionUpCMD_MODE TransitionUpCMD_MODE_MODE_MIN = TransitionUpCMD_MODE_BASIC;
constexpr TransitionUpCMD_MODE TransitionUpCMD_MODE_MODE_MAX = TransitionUpCMD_MODE_DESIGNED;
constexpr int TransitionUpCMD_MODE_MODE_ARRAYSIZE = TransitionUpCMD_MODE_MODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionUpCMD_MODE_descriptor();
template<typename T>
inline const std::string& TransitionUpCMD_MODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitionUpCMD_MODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitionUpCMD_MODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransitionUpCMD_MODE_descriptor(), enum_t_value);
}
inline bool TransitionUpCMD_MODE_Parse(
    const std::string& name, TransitionUpCMD_MODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransitionUpCMD_MODE>(
    TransitionUpCMD_MODE_descriptor(), name, value);
}
enum TransitionUpCMD_MATCH : int {
  TransitionUpCMD_MATCH_SEQ = 0,
  TransitionUpCMD_MATCH_RANDOM = 1,
  TransitionUpCMD_MATCH_PERFECT = 2,
  TransitionUpCMD_MATCH_TransitionUpCMD_MATCH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransitionUpCMD_MATCH_TransitionUpCMD_MATCH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransitionUpCMD_MATCH_IsValid(int value);
constexpr TransitionUpCMD_MATCH TransitionUpCMD_MATCH_MATCH_MIN = TransitionUpCMD_MATCH_SEQ;
constexpr TransitionUpCMD_MATCH TransitionUpCMD_MATCH_MATCH_MAX = TransitionUpCMD_MATCH_PERFECT;
constexpr int TransitionUpCMD_MATCH_MATCH_ARRAYSIZE = TransitionUpCMD_MATCH_MATCH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionUpCMD_MATCH_descriptor();
template<typename T>
inline const std::string& TransitionUpCMD_MATCH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitionUpCMD_MATCH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitionUpCMD_MATCH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransitionUpCMD_MATCH_descriptor(), enum_t_value);
}
inline bool TransitionUpCMD_MATCH_Parse(
    const std::string& name, TransitionUpCMD_MATCH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransitionUpCMD_MATCH>(
    TransitionUpCMD_MATCH_descriptor(), name, value);
}
// ===================================================================

class StripeIdWithHint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeIdWithHint) */ {
 public:
  StripeIdWithHint();
  virtual ~StripeIdWithHint();

  StripeIdWithHint(const StripeIdWithHint& from);
  StripeIdWithHint(StripeIdWithHint&& from) noexcept
    : StripeIdWithHint() {
    *this = ::std::move(from);
  }

  inline StripeIdWithHint& operator=(const StripeIdWithHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeIdWithHint& operator=(StripeIdWithHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeIdWithHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeIdWithHint* internal_default_instance() {
    return reinterpret_cast<const StripeIdWithHint*>(
               &_StripeIdWithHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StripeIdWithHint& a, StripeIdWithHint& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeIdWithHint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeIdWithHint* New() const final {
    return CreateMaybeMessage<StripeIdWithHint>(nullptr);
  }

  StripeIdWithHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeIdWithHint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeIdWithHint& from);
  void MergeFrom(const StripeIdWithHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeIdWithHint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeIdWithHint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripeidFieldNumber = 1,
    kBadlocationsFieldNumber = 2,
  };
  // .coordinator.StripeId stripeid = 1;
  bool has_stripeid() const;
  private:
  bool _internal_has_stripeid() const;
  public:
  void clear_stripeid();
  const ::coordinator::StripeId& stripeid() const;
  ::coordinator::StripeId* release_stripeid();
  ::coordinator::StripeId* mutable_stripeid();
  void set_allocated_stripeid(::coordinator::StripeId* stripeid);
  private:
  const ::coordinator::StripeId& _internal_stripeid() const;
  ::coordinator::StripeId* _internal_mutable_stripeid();
  public:

  // .coordinator.NodesLocation badlocations = 2;
  bool has_badlocations() const;
  private:
  bool _internal_has_badlocations() const;
  public:
  void clear_badlocations();
  const ::coordinator::NodesLocation& badlocations() const;
  ::coordinator::NodesLocation* release_badlocations();
  ::coordinator::NodesLocation* mutable_badlocations();
  void set_allocated_badlocations(::coordinator::NodesLocation* badlocations);
  private:
  const ::coordinator::NodesLocation& _internal_badlocations() const;
  ::coordinator::NodesLocation* _internal_mutable_badlocations();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeIdWithHint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::coordinator::StripeId* stripeid_;
  ::coordinator::NodesLocation* badlocations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class NodesLocation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.NodesLocation) */ {
 public:
  NodesLocation();
  virtual ~NodesLocation();

  NodesLocation(const NodesLocation& from);
  NodesLocation(NodesLocation&& from) noexcept
    : NodesLocation() {
    *this = ::std::move(from);
  }

  inline NodesLocation& operator=(const NodesLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodesLocation& operator=(NodesLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodesLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodesLocation* internal_default_instance() {
    return reinterpret_cast<const NodesLocation*>(
               &_NodesLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodesLocation& a, NodesLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(NodesLocation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodesLocation* New() const final {
    return CreateMaybeMessage<NodesLocation>(nullptr);
  }

  NodesLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodesLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodesLocation& from);
  void MergeFrom(const NodesLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodesLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.NodesLocation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesUriFieldNumber = 1,
  };
  // repeated string NodesUri = 1;
  int nodesuri_size() const;
  private:
  int _internal_nodesuri_size() const;
  public:
  void clear_nodesuri();
  const std::string& nodesuri(int index) const;
  std::string* mutable_nodesuri(int index);
  void set_nodesuri(int index, const std::string& value);
  void set_nodesuri(int index, std::string&& value);
  void set_nodesuri(int index, const char* value);
  void set_nodesuri(int index, const char* value, size_t size);
  std::string* add_nodesuri();
  void add_nodesuri(const std::string& value);
  void add_nodesuri(std::string&& value);
  void add_nodesuri(const char* value);
  void add_nodesuri(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nodesuri() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nodesuri();
  private:
  const std::string& _internal_nodesuri(int index) const;
  std::string* _internal_add_nodesuri();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.NodesLocation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nodesuri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeId) */ {
 public:
  StripeId();
  virtual ~StripeId();

  StripeId(const StripeId& from);
  StripeId(StripeId&& from) noexcept
    : StripeId() {
    *this = ::std::move(from);
  }

  inline StripeId& operator=(const StripeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeId& operator=(StripeId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeId* internal_default_instance() {
    return reinterpret_cast<const StripeId*>(
               &_StripeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StripeId& a, StripeId& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeId* New() const final {
    return CreateMaybeMessage<StripeId>(nullptr);
  }

  StripeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeId& from);
  void MergeFrom(const StripeId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripeidFieldNumber = 1,
  };
  // int32 stripeid = 1;
  void clear_stripeid();
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid() const;
  void set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripeid() const;
  void _internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeInfo) */ {
 public:
  StripeInfo();
  virtual ~StripeInfo();

  StripeInfo(const StripeInfo& from);
  StripeInfo(StripeInfo&& from) noexcept
    : StripeInfo() {
    *this = ::std::move(from);
  }

  inline StripeInfo& operator=(const StripeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeInfo& operator=(StripeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeInfo* internal_default_instance() {
    return reinterpret_cast<const StripeInfo*>(
               &_StripeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StripeInfo& a, StripeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeInfo* New() const final {
    return CreateMaybeMessage<StripeInfo>(nullptr);
  }

  StripeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeInfo& from);
  void MergeFrom(const StripeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripeidFieldNumber = 1,
    kStripeKFieldNumber = 2,
    kStripeLFieldNumber = 3,
    kStripeGFieldNumber = 4,
    kBlksizeFieldNumber = 5,
  };
  // int32 stripeid = 1;
  void clear_stripeid();
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid() const;
  void set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripeid() const;
  void _internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stripe_k = 2;
  void clear_stripe_k();
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_k() const;
  void set_stripe_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripe_k() const;
  void _internal_set_stripe_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stripe_l = 3;
  void clear_stripe_l();
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_l() const;
  void set_stripe_l(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripe_l() const;
  void _internal_set_stripe_l(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stripe_g = 4;
  void clear_stripe_g();
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_g() const;
  void set_stripe_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripe_g() const;
  void _internal_set_stripe_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 blksize = 5;
  void clear_blksize();
  ::PROTOBUF_NAMESPACE_ID::int32 blksize() const;
  void set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blksize() const;
  void _internal_set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_k_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_l_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_g_;
  ::PROTOBUF_NAMESPACE_ID::int32 blksize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeLocation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeLocation) */ {
 public:
  StripeLocation();
  virtual ~StripeLocation();

  StripeLocation(const StripeLocation& from);
  StripeLocation(StripeLocation&& from) noexcept
    : StripeLocation() {
    *this = ::std::move(from);
  }

  inline StripeLocation& operator=(const StripeLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeLocation& operator=(StripeLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeLocation* internal_default_instance() {
    return reinterpret_cast<const StripeLocation*>(
               &_StripeLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StripeLocation& a, StripeLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeLocation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeLocation* New() const final {
    return CreateMaybeMessage<StripeLocation>(nullptr);
  }

  StripeLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeLocation& from);
  void MergeFrom(const StripeLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeLocation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataLocFieldNumber = 1,
    kLocalparityLocFieldNumber = 2,
    kGlobalparityLocFieldNumber = 3,
  };
  // repeated string dataLoc = 1;
  int dataloc_size() const;
  private:
  int _internal_dataloc_size() const;
  public:
  void clear_dataloc();
  const std::string& dataloc(int index) const;
  std::string* mutable_dataloc(int index);
  void set_dataloc(int index, const std::string& value);
  void set_dataloc(int index, std::string&& value);
  void set_dataloc(int index, const char* value);
  void set_dataloc(int index, const char* value, size_t size);
  std::string* add_dataloc();
  void add_dataloc(const std::string& value);
  void add_dataloc(std::string&& value);
  void add_dataloc(const char* value);
  void add_dataloc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dataloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dataloc();
  private:
  const std::string& _internal_dataloc(int index) const;
  std::string* _internal_add_dataloc();
  public:

  // repeated string localparityLoc = 2;
  int localparityloc_size() const;
  private:
  int _internal_localparityloc_size() const;
  public:
  void clear_localparityloc();
  const std::string& localparityloc(int index) const;
  std::string* mutable_localparityloc(int index);
  void set_localparityloc(int index, const std::string& value);
  void set_localparityloc(int index, std::string&& value);
  void set_localparityloc(int index, const char* value);
  void set_localparityloc(int index, const char* value, size_t size);
  std::string* add_localparityloc();
  void add_localparityloc(const std::string& value);
  void add_localparityloc(std::string&& value);
  void add_localparityloc(const char* value);
  void add_localparityloc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& localparityloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_localparityloc();
  private:
  const std::string& _internal_localparityloc(int index) const;
  std::string* _internal_add_localparityloc();
  public:

  // repeated string globalparityLoc = 3;
  int globalparityloc_size() const;
  private:
  int _internal_globalparityloc_size() const;
  public:
  void clear_globalparityloc();
  const std::string& globalparityloc(int index) const;
  std::string* mutable_globalparityloc(int index);
  void set_globalparityloc(int index, const std::string& value);
  void set_globalparityloc(int index, std::string&& value);
  void set_globalparityloc(int index, const char* value);
  void set_globalparityloc(int index, const char* value, size_t size);
  std::string* add_globalparityloc();
  void add_globalparityloc(const std::string& value);
  void add_globalparityloc(std::string&& value);
  void add_globalparityloc(const char* value);
  void add_globalparityloc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& globalparityloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_globalparityloc();
  private:
  const std::string& _internal_globalparityloc(int index) const;
  std::string* _internal_add_globalparityloc();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeLocation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dataloc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> localparityloc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> globalparityloc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeDetail) */ {
 public:
  StripeDetail();
  virtual ~StripeDetail();

  StripeDetail(const StripeDetail& from);
  StripeDetail(StripeDetail&& from) noexcept
    : StripeDetail() {
    *this = ::std::move(from);
  }

  inline StripeDetail& operator=(const StripeDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeDetail& operator=(StripeDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeDetail* internal_default_instance() {
    return reinterpret_cast<const StripeDetail*>(
               &_StripeDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StripeDetail& a, StripeDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeDetail* New() const final {
    return CreateMaybeMessage<StripeDetail>(nullptr);
  }

  StripeDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeDetail& from);
  void MergeFrom(const StripeDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripelocationFieldNumber = 1,
    kStripeidFieldNumber = 2,
  };
  // .coordinator.StripeLocation stripelocation = 1;
  bool has_stripelocation() const;
  private:
  bool _internal_has_stripelocation() const;
  public:
  void clear_stripelocation();
  const ::coordinator::StripeLocation& stripelocation() const;
  ::coordinator::StripeLocation* release_stripelocation();
  ::coordinator::StripeLocation* mutable_stripelocation();
  void set_allocated_stripelocation(::coordinator::StripeLocation* stripelocation);
  private:
  const ::coordinator::StripeLocation& _internal_stripelocation() const;
  ::coordinator::StripeLocation* _internal_mutable_stripelocation();
  public:

  // .coordinator.StripeId stripeid = 2;
  bool has_stripeid() const;
  private:
  bool _internal_has_stripeid() const;
  public:
  void clear_stripeid();
  const ::coordinator::StripeId& stripeid() const;
  ::coordinator::StripeId* release_stripeid();
  ::coordinator::StripeId* mutable_stripeid();
  void set_allocated_stripeid(::coordinator::StripeId* stripeid);
  private:
  const ::coordinator::StripeId& _internal_stripeid() const;
  ::coordinator::StripeId* _internal_mutable_stripeid();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::coordinator::StripeLocation* stripelocation_;
  ::coordinator::StripeId* stripeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class SetPlacementPolicyCMD :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.SetPlacementPolicyCMD) */ {
 public:
  SetPlacementPolicyCMD();
  virtual ~SetPlacementPolicyCMD();

  SetPlacementPolicyCMD(const SetPlacementPolicyCMD& from);
  SetPlacementPolicyCMD(SetPlacementPolicyCMD&& from) noexcept
    : SetPlacementPolicyCMD() {
    *this = ::std::move(from);
  }

  inline SetPlacementPolicyCMD& operator=(const SetPlacementPolicyCMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlacementPolicyCMD& operator=(SetPlacementPolicyCMD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPlacementPolicyCMD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPlacementPolicyCMD* internal_default_instance() {
    return reinterpret_cast<const SetPlacementPolicyCMD*>(
               &_SetPlacementPolicyCMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetPlacementPolicyCMD& a, SetPlacementPolicyCMD& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPlacementPolicyCMD* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPlacementPolicyCMD* New() const final {
    return CreateMaybeMessage<SetPlacementPolicyCMD>(nullptr);
  }

  SetPlacementPolicyCMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPlacementPolicyCMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPlacementPolicyCMD& from);
  void MergeFrom(const SetPlacementPolicyCMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlacementPolicyCMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.SetPlacementPolicyCMD";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetPlacementPolicyCMD_PLACE PLACE;
  static constexpr PLACE COMPACT =
    SetPlacementPolicyCMD_PLACE_COMPACT;
  static constexpr PLACE RANDOM =
    SetPlacementPolicyCMD_PLACE_RANDOM;
  static constexpr PLACE SPARSE =
    SetPlacementPolicyCMD_PLACE_SPARSE;
  static inline bool PLACE_IsValid(int value) {
    return SetPlacementPolicyCMD_PLACE_IsValid(value);
  }
  static constexpr PLACE PLACE_MIN =
    SetPlacementPolicyCMD_PLACE_PLACE_MIN;
  static constexpr PLACE PLACE_MAX =
    SetPlacementPolicyCMD_PLACE_PLACE_MAX;
  static constexpr int PLACE_ARRAYSIZE =
    SetPlacementPolicyCMD_PLACE_PLACE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PLACE_descriptor() {
    return SetPlacementPolicyCMD_PLACE_descriptor();
  }
  template<typename T>
  static inline const std::string& PLACE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PLACE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PLACE_Name.");
    return SetPlacementPolicyCMD_PLACE_Name(enum_t_value);
  }
  static inline bool PLACE_Parse(const std::string& name,
      PLACE* value) {
    return SetPlacementPolicyCMD_PLACE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceFieldNumber = 1,
  };
  // .coordinator.SetPlacementPolicyCMD.PLACE place = 1;
  void clear_place();
  ::coordinator::SetPlacementPolicyCMD_PLACE place() const;
  void set_place(::coordinator::SetPlacementPolicyCMD_PLACE value);
  private:
  ::coordinator::SetPlacementPolicyCMD_PLACE _internal_place() const;
  void _internal_set_place(::coordinator::SetPlacementPolicyCMD_PLACE value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.SetPlacementPolicyCMD)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int place_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDstpathFieldNumber = 1,
  };
  // string dstpath = 1;
  void clear_dstpath();
  const std::string& dstpath() const;
  void set_dstpath(const std::string& value);
  void set_dstpath(std::string&& value);
  void set_dstpath(const char* value);
  void set_dstpath(const char* value, size_t size);
  std::string* mutable_dstpath();
  std::string* release_dstpath();
  void set_allocated_dstpath(std::string* dstpath);
  private:
  const std::string& _internal_dstpath() const;
  void _internal_set_dstpath(const std::string& value);
  std::string* _internal_mutable_dstpath();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RequestResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.RequestResult) */ {
 public:
  RequestResult();
  virtual ~RequestResult();

  RequestResult(const RequestResult& from);
  RequestResult(RequestResult&& from) noexcept
    : RequestResult() {
    *this = ::std::move(from);
  }

  inline RequestResult& operator=(const RequestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResult& operator=(RequestResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestResult* internal_default_instance() {
    return reinterpret_cast<const RequestResult*>(
               &_RequestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RequestResult& a, RequestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestResult* New() const final {
    return CreateMaybeMessage<RequestResult>(nullptr);
  }

  RequestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestResult& from);
  void MergeFrom(const RequestResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.RequestResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrueorfalseFieldNumber = 1,
  };
  // bool trueorfalse = 1;
  void clear_trueorfalse();
  bool trueorfalse() const;
  void set_trueorfalse(bool value);
  private:
  bool _internal_trueorfalse() const;
  void _internal_set_trueorfalse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.RequestResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool trueorfalse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ListAllStripeCMD :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.ListAllStripeCMD) */ {
 public:
  ListAllStripeCMD();
  virtual ~ListAllStripeCMD();

  ListAllStripeCMD(const ListAllStripeCMD& from);
  ListAllStripeCMD(ListAllStripeCMD&& from) noexcept
    : ListAllStripeCMD() {
    *this = ::std::move(from);
  }

  inline ListAllStripeCMD& operator=(const ListAllStripeCMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAllStripeCMD& operator=(ListAllStripeCMD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAllStripeCMD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAllStripeCMD* internal_default_instance() {
    return reinterpret_cast<const ListAllStripeCMD*>(
               &_ListAllStripeCMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListAllStripeCMD& a, ListAllStripeCMD& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAllStripeCMD* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAllStripeCMD* New() const final {
    return CreateMaybeMessage<ListAllStripeCMD>(nullptr);
  }

  ListAllStripeCMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAllStripeCMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAllStripeCMD& from);
  void MergeFrom(const ListAllStripeCMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAllStripeCMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.ListAllStripeCMD";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:coordinator.ListAllStripeCMD)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class TransitionUpCMD :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.TransitionUpCMD) */ {
 public:
  TransitionUpCMD();
  virtual ~TransitionUpCMD();

  TransitionUpCMD(const TransitionUpCMD& from);
  TransitionUpCMD(TransitionUpCMD&& from) noexcept
    : TransitionUpCMD() {
    *this = ::std::move(from);
  }

  inline TransitionUpCMD& operator=(const TransitionUpCMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitionUpCMD& operator=(TransitionUpCMD&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransitionUpCMD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransitionUpCMD* internal_default_instance() {
    return reinterpret_cast<const TransitionUpCMD*>(
               &_TransitionUpCMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TransitionUpCMD& a, TransitionUpCMD& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitionUpCMD* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransitionUpCMD* New() const final {
    return CreateMaybeMessage<TransitionUpCMD>(nullptr);
  }

  TransitionUpCMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransitionUpCMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransitionUpCMD& from);
  void MergeFrom(const TransitionUpCMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransitionUpCMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.TransitionUpCMD";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransitionUpCMD_MODE MODE;
  static constexpr MODE BASIC =
    TransitionUpCMD_MODE_BASIC;
  static constexpr MODE BASIC_PART =
    TransitionUpCMD_MODE_BASIC_PART;
  static constexpr MODE DESIGNED =
    TransitionUpCMD_MODE_DESIGNED;
  static inline bool MODE_IsValid(int value) {
    return TransitionUpCMD_MODE_IsValid(value);
  }
  static constexpr MODE MODE_MIN =
    TransitionUpCMD_MODE_MODE_MIN;
  static constexpr MODE MODE_MAX =
    TransitionUpCMD_MODE_MODE_MAX;
  static constexpr int MODE_ARRAYSIZE =
    TransitionUpCMD_MODE_MODE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MODE_descriptor() {
    return TransitionUpCMD_MODE_descriptor();
  }
  template<typename T>
  static inline const std::string& MODE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MODE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MODE_Name.");
    return TransitionUpCMD_MODE_Name(enum_t_value);
  }
  static inline bool MODE_Parse(const std::string& name,
      MODE* value) {
    return TransitionUpCMD_MODE_Parse(name, value);
  }

  typedef TransitionUpCMD_MATCH MATCH;
  static constexpr MATCH SEQ =
    TransitionUpCMD_MATCH_SEQ;
  static constexpr MATCH RANDOM =
    TransitionUpCMD_MATCH_RANDOM;
  static constexpr MATCH PERFECT =
    TransitionUpCMD_MATCH_PERFECT;
  static inline bool MATCH_IsValid(int value) {
    return TransitionUpCMD_MATCH_IsValid(value);
  }
  static constexpr MATCH MATCH_MIN =
    TransitionUpCMD_MATCH_MATCH_MIN;
  static constexpr MATCH MATCH_MAX =
    TransitionUpCMD_MATCH_MATCH_MAX;
  static constexpr int MATCH_ARRAYSIZE =
    TransitionUpCMD_MATCH_MATCH_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MATCH_descriptor() {
    return TransitionUpCMD_MATCH_descriptor();
  }
  template<typename T>
  static inline const std::string& MATCH_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MATCH>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MATCH_Name.");
    return TransitionUpCMD_MATCH_Name(enum_t_value);
  }
  static inline bool MATCH_Parse(const std::string& name,
      MATCH* value) {
    return TransitionUpCMD_MATCH_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kStepFieldNumber = 2,
    kDoublegpFieldNumber = 3,
    kMatchFieldNumber = 4,
  };
  // .coordinator.TransitionUpCMD.MODE mode = 1;
  void clear_mode();
  ::coordinator::TransitionUpCMD_MODE mode() const;
  void set_mode(::coordinator::TransitionUpCMD_MODE value);
  private:
  ::coordinator::TransitionUpCMD_MODE _internal_mode() const;
  void _internal_set_mode(::coordinator::TransitionUpCMD_MODE value);
  public:

  // int32 step = 2;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool doublegp = 3;
  void clear_doublegp();
  bool doublegp() const;
  void set_doublegp(bool value);
  private:
  bool _internal_doublegp() const;
  void _internal_set_doublegp(bool value);
  public:

  // .coordinator.TransitionUpCMD.MATCH match = 4;
  void clear_match();
  ::coordinator::TransitionUpCMD_MATCH match() const;
  void set_match(::coordinator::TransitionUpCMD_MATCH value);
  private:
  ::coordinator::TransitionUpCMD_MATCH _internal_match() const;
  void _internal_set_match(::coordinator::TransitionUpCMD_MATCH value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.TransitionUpCMD)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  bool doublegp_;
  int match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StripeIdWithHint

// .coordinator.StripeId stripeid = 1;
inline bool StripeIdWithHint::_internal_has_stripeid() const {
  return this != internal_default_instance() && stripeid_ != nullptr;
}
inline bool StripeIdWithHint::has_stripeid() const {
  return _internal_has_stripeid();
}
inline void StripeIdWithHint::clear_stripeid() {
  if (GetArenaNoVirtual() == nullptr && stripeid_ != nullptr) {
    delete stripeid_;
  }
  stripeid_ = nullptr;
}
inline const ::coordinator::StripeId& StripeIdWithHint::_internal_stripeid() const {
  const ::coordinator::StripeId* p = stripeid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinator::StripeId*>(
      &::coordinator::_StripeId_default_instance_);
}
inline const ::coordinator::StripeId& StripeIdWithHint::stripeid() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeIdWithHint.stripeid)
  return _internal_stripeid();
}
inline ::coordinator::StripeId* StripeIdWithHint::release_stripeid() {
  // @@protoc_insertion_point(field_release:coordinator.StripeIdWithHint.stripeid)
  
  ::coordinator::StripeId* temp = stripeid_;
  stripeid_ = nullptr;
  return temp;
}
inline ::coordinator::StripeId* StripeIdWithHint::_internal_mutable_stripeid() {
  
  if (stripeid_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinator::StripeId>(GetArenaNoVirtual());
    stripeid_ = p;
  }
  return stripeid_;
}
inline ::coordinator::StripeId* StripeIdWithHint::mutable_stripeid() {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeIdWithHint.stripeid)
  return _internal_mutable_stripeid();
}
inline void StripeIdWithHint::set_allocated_stripeid(::coordinator::StripeId* stripeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stripeid_;
  }
  if (stripeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stripeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stripeid, submessage_arena);
    }
    
  } else {
    
  }
  stripeid_ = stripeid;
  // @@protoc_insertion_point(field_set_allocated:coordinator.StripeIdWithHint.stripeid)
}

// .coordinator.NodesLocation badlocations = 2;
inline bool StripeIdWithHint::_internal_has_badlocations() const {
  return this != internal_default_instance() && badlocations_ != nullptr;
}
inline bool StripeIdWithHint::has_badlocations() const {
  return _internal_has_badlocations();
}
inline void StripeIdWithHint::clear_badlocations() {
  if (GetArenaNoVirtual() == nullptr && badlocations_ != nullptr) {
    delete badlocations_;
  }
  badlocations_ = nullptr;
}
inline const ::coordinator::NodesLocation& StripeIdWithHint::_internal_badlocations() const {
  const ::coordinator::NodesLocation* p = badlocations_;
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinator::NodesLocation*>(
      &::coordinator::_NodesLocation_default_instance_);
}
inline const ::coordinator::NodesLocation& StripeIdWithHint::badlocations() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeIdWithHint.badlocations)
  return _internal_badlocations();
}
inline ::coordinator::NodesLocation* StripeIdWithHint::release_badlocations() {
  // @@protoc_insertion_point(field_release:coordinator.StripeIdWithHint.badlocations)
  
  ::coordinator::NodesLocation* temp = badlocations_;
  badlocations_ = nullptr;
  return temp;
}
inline ::coordinator::NodesLocation* StripeIdWithHint::_internal_mutable_badlocations() {
  
  if (badlocations_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinator::NodesLocation>(GetArenaNoVirtual());
    badlocations_ = p;
  }
  return badlocations_;
}
inline ::coordinator::NodesLocation* StripeIdWithHint::mutable_badlocations() {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeIdWithHint.badlocations)
  return _internal_mutable_badlocations();
}
inline void StripeIdWithHint::set_allocated_badlocations(::coordinator::NodesLocation* badlocations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete badlocations_;
  }
  if (badlocations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      badlocations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, badlocations, submessage_arena);
    }
    
  } else {
    
  }
  badlocations_ = badlocations;
  // @@protoc_insertion_point(field_set_allocated:coordinator.StripeIdWithHint.badlocations)
}

// -------------------------------------------------------------------

// NodesLocation

// repeated string NodesUri = 1;
inline int NodesLocation::_internal_nodesuri_size() const {
  return nodesuri_.size();
}
inline int NodesLocation::nodesuri_size() const {
  return _internal_nodesuri_size();
}
inline void NodesLocation::clear_nodesuri() {
  nodesuri_.Clear();
}
inline std::string* NodesLocation::add_nodesuri() {
  // @@protoc_insertion_point(field_add_mutable:coordinator.NodesLocation.NodesUri)
  return _internal_add_nodesuri();
}
inline const std::string& NodesLocation::_internal_nodesuri(int index) const {
  return nodesuri_.Get(index);
}
inline const std::string& NodesLocation::nodesuri(int index) const {
  // @@protoc_insertion_point(field_get:coordinator.NodesLocation.NodesUri)
  return _internal_nodesuri(index);
}
inline std::string* NodesLocation::mutable_nodesuri(int index) {
  // @@protoc_insertion_point(field_mutable:coordinator.NodesLocation.NodesUri)
  return nodesuri_.Mutable(index);
}
inline void NodesLocation::set_nodesuri(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:coordinator.NodesLocation.NodesUri)
  nodesuri_.Mutable(index)->assign(value);
}
inline void NodesLocation::set_nodesuri(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:coordinator.NodesLocation.NodesUri)
  nodesuri_.Mutable(index)->assign(std::move(value));
}
inline void NodesLocation::set_nodesuri(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodesuri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coordinator.NodesLocation.NodesUri)
}
inline void NodesLocation::set_nodesuri(int index, const char* value, size_t size) {
  nodesuri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coordinator.NodesLocation.NodesUri)
}
inline std::string* NodesLocation::_internal_add_nodesuri() {
  return nodesuri_.Add();
}
inline void NodesLocation::add_nodesuri(const std::string& value) {
  nodesuri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coordinator.NodesLocation.NodesUri)
}
inline void NodesLocation::add_nodesuri(std::string&& value) {
  nodesuri_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:coordinator.NodesLocation.NodesUri)
}
inline void NodesLocation::add_nodesuri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nodesuri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coordinator.NodesLocation.NodesUri)
}
inline void NodesLocation::add_nodesuri(const char* value, size_t size) {
  nodesuri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coordinator.NodesLocation.NodesUri)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodesLocation::nodesuri() const {
  // @@protoc_insertion_point(field_list:coordinator.NodesLocation.NodesUri)
  return nodesuri_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodesLocation::mutable_nodesuri() {
  // @@protoc_insertion_point(field_mutable_list:coordinator.NodesLocation.NodesUri)
  return &nodesuri_;
}

// -------------------------------------------------------------------

// StripeId

// int32 stripeid = 1;
inline void StripeId::clear_stripeid() {
  stripeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeId::_internal_stripeid() const {
  return stripeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeId::stripeid() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeId.stripeid)
  return _internal_stripeid();
}
inline void StripeId::_internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripeid_ = value;
}
inline void StripeId::set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripeid(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeId.stripeid)
}

// -------------------------------------------------------------------

// StripeInfo

// int32 stripeid = 1;
inline void StripeInfo::clear_stripeid() {
  stripeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_stripeid() const {
  return stripeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::stripeid() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.stripeid)
  return _internal_stripeid();
}
inline void StripeInfo::_internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripeid_ = value;
}
inline void StripeInfo::set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripeid(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.stripeid)
}

// int32 stripe_k = 2;
inline void StripeInfo::clear_stripe_k() {
  stripe_k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_stripe_k() const {
  return stripe_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::stripe_k() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.stripe_k)
  return _internal_stripe_k();
}
inline void StripeInfo::_internal_set_stripe_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripe_k_ = value;
}
inline void StripeInfo::set_stripe_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripe_k(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.stripe_k)
}

// int32 stripe_l = 3;
inline void StripeInfo::clear_stripe_l() {
  stripe_l_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_stripe_l() const {
  return stripe_l_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::stripe_l() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.stripe_l)
  return _internal_stripe_l();
}
inline void StripeInfo::_internal_set_stripe_l(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripe_l_ = value;
}
inline void StripeInfo::set_stripe_l(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripe_l(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.stripe_l)
}

// int32 stripe_g = 4;
inline void StripeInfo::clear_stripe_g() {
  stripe_g_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_stripe_g() const {
  return stripe_g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::stripe_g() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.stripe_g)
  return _internal_stripe_g();
}
inline void StripeInfo::_internal_set_stripe_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripe_g_ = value;
}
inline void StripeInfo::set_stripe_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripe_g(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.stripe_g)
}

// int32 blksize = 5;
inline void StripeInfo::clear_blksize() {
  blksize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_blksize() const {
  return blksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::blksize() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.blksize)
  return _internal_blksize();
}
inline void StripeInfo::_internal_set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blksize_ = value;
}
inline void StripeInfo::set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blksize(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.blksize)
}

// -------------------------------------------------------------------

// StripeLocation

// repeated string dataLoc = 1;
inline int StripeLocation::_internal_dataloc_size() const {
  return dataloc_.size();
}
inline int StripeLocation::dataloc_size() const {
  return _internal_dataloc_size();
}
inline void StripeLocation::clear_dataloc() {
  dataloc_.Clear();
}
inline std::string* StripeLocation::add_dataloc() {
  // @@protoc_insertion_point(field_add_mutable:coordinator.StripeLocation.dataLoc)
  return _internal_add_dataloc();
}
inline const std::string& StripeLocation::_internal_dataloc(int index) const {
  return dataloc_.Get(index);
}
inline const std::string& StripeLocation::dataloc(int index) const {
  // @@protoc_insertion_point(field_get:coordinator.StripeLocation.dataLoc)
  return _internal_dataloc(index);
}
inline std::string* StripeLocation::mutable_dataloc(int index) {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeLocation.dataLoc)
  return dataloc_.Mutable(index);
}
inline void StripeLocation::set_dataloc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:coordinator.StripeLocation.dataLoc)
  dataloc_.Mutable(index)->assign(value);
}
inline void StripeLocation::set_dataloc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:coordinator.StripeLocation.dataLoc)
  dataloc_.Mutable(index)->assign(std::move(value));
}
inline void StripeLocation::set_dataloc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataloc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coordinator.StripeLocation.dataLoc)
}
inline void StripeLocation::set_dataloc(int index, const char* value, size_t size) {
  dataloc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coordinator.StripeLocation.dataLoc)
}
inline std::string* StripeLocation::_internal_add_dataloc() {
  return dataloc_.Add();
}
inline void StripeLocation::add_dataloc(const std::string& value) {
  dataloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coordinator.StripeLocation.dataLoc)
}
inline void StripeLocation::add_dataloc(std::string&& value) {
  dataloc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:coordinator.StripeLocation.dataLoc)
}
inline void StripeLocation::add_dataloc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coordinator.StripeLocation.dataLoc)
}
inline void StripeLocation::add_dataloc(const char* value, size_t size) {
  dataloc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coordinator.StripeLocation.dataLoc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StripeLocation::dataloc() const {
  // @@protoc_insertion_point(field_list:coordinator.StripeLocation.dataLoc)
  return dataloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StripeLocation::mutable_dataloc() {
  // @@protoc_insertion_point(field_mutable_list:coordinator.StripeLocation.dataLoc)
  return &dataloc_;
}

// repeated string localparityLoc = 2;
inline int StripeLocation::_internal_localparityloc_size() const {
  return localparityloc_.size();
}
inline int StripeLocation::localparityloc_size() const {
  return _internal_localparityloc_size();
}
inline void StripeLocation::clear_localparityloc() {
  localparityloc_.Clear();
}
inline std::string* StripeLocation::add_localparityloc() {
  // @@protoc_insertion_point(field_add_mutable:coordinator.StripeLocation.localparityLoc)
  return _internal_add_localparityloc();
}
inline const std::string& StripeLocation::_internal_localparityloc(int index) const {
  return localparityloc_.Get(index);
}
inline const std::string& StripeLocation::localparityloc(int index) const {
  // @@protoc_insertion_point(field_get:coordinator.StripeLocation.localparityLoc)
  return _internal_localparityloc(index);
}
inline std::string* StripeLocation::mutable_localparityloc(int index) {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeLocation.localparityLoc)
  return localparityloc_.Mutable(index);
}
inline void StripeLocation::set_localparityloc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:coordinator.StripeLocation.localparityLoc)
  localparityloc_.Mutable(index)->assign(value);
}
inline void StripeLocation::set_localparityloc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:coordinator.StripeLocation.localparityLoc)
  localparityloc_.Mutable(index)->assign(std::move(value));
}
inline void StripeLocation::set_localparityloc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  localparityloc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coordinator.StripeLocation.localparityLoc)
}
inline void StripeLocation::set_localparityloc(int index, const char* value, size_t size) {
  localparityloc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coordinator.StripeLocation.localparityLoc)
}
inline std::string* StripeLocation::_internal_add_localparityloc() {
  return localparityloc_.Add();
}
inline void StripeLocation::add_localparityloc(const std::string& value) {
  localparityloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coordinator.StripeLocation.localparityLoc)
}
inline void StripeLocation::add_localparityloc(std::string&& value) {
  localparityloc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:coordinator.StripeLocation.localparityLoc)
}
inline void StripeLocation::add_localparityloc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  localparityloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coordinator.StripeLocation.localparityLoc)
}
inline void StripeLocation::add_localparityloc(const char* value, size_t size) {
  localparityloc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coordinator.StripeLocation.localparityLoc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StripeLocation::localparityloc() const {
  // @@protoc_insertion_point(field_list:coordinator.StripeLocation.localparityLoc)
  return localparityloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StripeLocation::mutable_localparityloc() {
  // @@protoc_insertion_point(field_mutable_list:coordinator.StripeLocation.localparityLoc)
  return &localparityloc_;
}

// repeated string globalparityLoc = 3;
inline int StripeLocation::_internal_globalparityloc_size() const {
  return globalparityloc_.size();
}
inline int StripeLocation::globalparityloc_size() const {
  return _internal_globalparityloc_size();
}
inline void StripeLocation::clear_globalparityloc() {
  globalparityloc_.Clear();
}
inline std::string* StripeLocation::add_globalparityloc() {
  // @@protoc_insertion_point(field_add_mutable:coordinator.StripeLocation.globalparityLoc)
  return _internal_add_globalparityloc();
}
inline const std::string& StripeLocation::_internal_globalparityloc(int index) const {
  return globalparityloc_.Get(index);
}
inline const std::string& StripeLocation::globalparityloc(int index) const {
  // @@protoc_insertion_point(field_get:coordinator.StripeLocation.globalparityLoc)
  return _internal_globalparityloc(index);
}
inline std::string* StripeLocation::mutable_globalparityloc(int index) {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeLocation.globalparityLoc)
  return globalparityloc_.Mutable(index);
}
inline void StripeLocation::set_globalparityloc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:coordinator.StripeLocation.globalparityLoc)
  globalparityloc_.Mutable(index)->assign(value);
}
inline void StripeLocation::set_globalparityloc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:coordinator.StripeLocation.globalparityLoc)
  globalparityloc_.Mutable(index)->assign(std::move(value));
}
inline void StripeLocation::set_globalparityloc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  globalparityloc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coordinator.StripeLocation.globalparityLoc)
}
inline void StripeLocation::set_globalparityloc(int index, const char* value, size_t size) {
  globalparityloc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coordinator.StripeLocation.globalparityLoc)
}
inline std::string* StripeLocation::_internal_add_globalparityloc() {
  return globalparityloc_.Add();
}
inline void StripeLocation::add_globalparityloc(const std::string& value) {
  globalparityloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coordinator.StripeLocation.globalparityLoc)
}
inline void StripeLocation::add_globalparityloc(std::string&& value) {
  globalparityloc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:coordinator.StripeLocation.globalparityLoc)
}
inline void StripeLocation::add_globalparityloc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  globalparityloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coordinator.StripeLocation.globalparityLoc)
}
inline void StripeLocation::add_globalparityloc(const char* value, size_t size) {
  globalparityloc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coordinator.StripeLocation.globalparityLoc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StripeLocation::globalparityloc() const {
  // @@protoc_insertion_point(field_list:coordinator.StripeLocation.globalparityLoc)
  return globalparityloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StripeLocation::mutable_globalparityloc() {
  // @@protoc_insertion_point(field_mutable_list:coordinator.StripeLocation.globalparityLoc)
  return &globalparityloc_;
}

// -------------------------------------------------------------------

// StripeDetail

// .coordinator.StripeLocation stripelocation = 1;
inline bool StripeDetail::_internal_has_stripelocation() const {
  return this != internal_default_instance() && stripelocation_ != nullptr;
}
inline bool StripeDetail::has_stripelocation() const {
  return _internal_has_stripelocation();
}
inline void StripeDetail::clear_stripelocation() {
  if (GetArenaNoVirtual() == nullptr && stripelocation_ != nullptr) {
    delete stripelocation_;
  }
  stripelocation_ = nullptr;
}
inline const ::coordinator::StripeLocation& StripeDetail::_internal_stripelocation() const {
  const ::coordinator::StripeLocation* p = stripelocation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinator::StripeLocation*>(
      &::coordinator::_StripeLocation_default_instance_);
}
inline const ::coordinator::StripeLocation& StripeDetail::stripelocation() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeDetail.stripelocation)
  return _internal_stripelocation();
}
inline ::coordinator::StripeLocation* StripeDetail::release_stripelocation() {
  // @@protoc_insertion_point(field_release:coordinator.StripeDetail.stripelocation)
  
  ::coordinator::StripeLocation* temp = stripelocation_;
  stripelocation_ = nullptr;
  return temp;
}
inline ::coordinator::StripeLocation* StripeDetail::_internal_mutable_stripelocation() {
  
  if (stripelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinator::StripeLocation>(GetArenaNoVirtual());
    stripelocation_ = p;
  }
  return stripelocation_;
}
inline ::coordinator::StripeLocation* StripeDetail::mutable_stripelocation() {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeDetail.stripelocation)
  return _internal_mutable_stripelocation();
}
inline void StripeDetail::set_allocated_stripelocation(::coordinator::StripeLocation* stripelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stripelocation_;
  }
  if (stripelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stripelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stripelocation, submessage_arena);
    }
    
  } else {
    
  }
  stripelocation_ = stripelocation;
  // @@protoc_insertion_point(field_set_allocated:coordinator.StripeDetail.stripelocation)
}

// .coordinator.StripeId stripeid = 2;
inline bool StripeDetail::_internal_has_stripeid() const {
  return this != internal_default_instance() && stripeid_ != nullptr;
}
inline bool StripeDetail::has_stripeid() const {
  return _internal_has_stripeid();
}
inline void StripeDetail::clear_stripeid() {
  if (GetArenaNoVirtual() == nullptr && stripeid_ != nullptr) {
    delete stripeid_;
  }
  stripeid_ = nullptr;
}
inline const ::coordinator::StripeId& StripeDetail::_internal_stripeid() const {
  const ::coordinator::StripeId* p = stripeid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinator::StripeId*>(
      &::coordinator::_StripeId_default_instance_);
}
inline const ::coordinator::StripeId& StripeDetail::stripeid() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeDetail.stripeid)
  return _internal_stripeid();
}
inline ::coordinator::StripeId* StripeDetail::release_stripeid() {
  // @@protoc_insertion_point(field_release:coordinator.StripeDetail.stripeid)
  
  ::coordinator::StripeId* temp = stripeid_;
  stripeid_ = nullptr;
  return temp;
}
inline ::coordinator::StripeId* StripeDetail::_internal_mutable_stripeid() {
  
  if (stripeid_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinator::StripeId>(GetArenaNoVirtual());
    stripeid_ = p;
  }
  return stripeid_;
}
inline ::coordinator::StripeId* StripeDetail::mutable_stripeid() {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeDetail.stripeid)
  return _internal_mutable_stripeid();
}
inline void StripeDetail::set_allocated_stripeid(::coordinator::StripeId* stripeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stripeid_;
  }
  if (stripeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stripeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stripeid, submessage_arena);
    }
    
  } else {
    
  }
  stripeid_ = stripeid;
  // @@protoc_insertion_point(field_set_allocated:coordinator.StripeDetail.stripeid)
}

// -------------------------------------------------------------------

// SetPlacementPolicyCMD

// .coordinator.SetPlacementPolicyCMD.PLACE place = 1;
inline void SetPlacementPolicyCMD::clear_place() {
  place_ = 0;
}
inline ::coordinator::SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD::_internal_place() const {
  return static_cast< ::coordinator::SetPlacementPolicyCMD_PLACE >(place_);
}
inline ::coordinator::SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD::place() const {
  // @@protoc_insertion_point(field_get:coordinator.SetPlacementPolicyCMD.place)
  return _internal_place();
}
inline void SetPlacementPolicyCMD::_internal_set_place(::coordinator::SetPlacementPolicyCMD_PLACE value) {
  
  place_ = value;
}
inline void SetPlacementPolicyCMD::set_place(::coordinator::SetPlacementPolicyCMD_PLACE value) {
  _internal_set_place(value);
  // @@protoc_insertion_point(field_set:coordinator.SetPlacementPolicyCMD.place)
}

// -------------------------------------------------------------------

// Path

// string dstpath = 1;
inline void Path::clear_dstpath() {
  dstpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Path::dstpath() const {
  // @@protoc_insertion_point(field_get:coordinator.Path.dstpath)
  return _internal_dstpath();
}
inline void Path::set_dstpath(const std::string& value) {
  _internal_set_dstpath(value);
  // @@protoc_insertion_point(field_set:coordinator.Path.dstpath)
}
inline std::string* Path::mutable_dstpath() {
  // @@protoc_insertion_point(field_mutable:coordinator.Path.dstpath)
  return _internal_mutable_dstpath();
}
inline const std::string& Path::_internal_dstpath() const {
  return dstpath_.GetNoArena();
}
inline void Path::_internal_set_dstpath(const std::string& value) {
  
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Path::set_dstpath(std::string&& value) {
  
  dstpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:coordinator.Path.dstpath)
}
inline void Path::set_dstpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coordinator.Path.dstpath)
}
inline void Path::set_dstpath(const char* value, size_t size) {
  
  dstpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coordinator.Path.dstpath)
}
inline std::string* Path::_internal_mutable_dstpath() {
  
  return dstpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Path::release_dstpath() {
  // @@protoc_insertion_point(field_release:coordinator.Path.dstpath)
  
  return dstpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_dstpath(std::string* dstpath) {
  if (dstpath != nullptr) {
    
  } else {
    
  }
  dstpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstpath);
  // @@protoc_insertion_point(field_set_allocated:coordinator.Path.dstpath)
}

// -------------------------------------------------------------------

// RequestResult

// bool trueorfalse = 1;
inline void RequestResult::clear_trueorfalse() {
  trueorfalse_ = false;
}
inline bool RequestResult::_internal_trueorfalse() const {
  return trueorfalse_;
}
inline bool RequestResult::trueorfalse() const {
  // @@protoc_insertion_point(field_get:coordinator.RequestResult.trueorfalse)
  return _internal_trueorfalse();
}
inline void RequestResult::_internal_set_trueorfalse(bool value) {
  
  trueorfalse_ = value;
}
inline void RequestResult::set_trueorfalse(bool value) {
  _internal_set_trueorfalse(value);
  // @@protoc_insertion_point(field_set:coordinator.RequestResult.trueorfalse)
}

// -------------------------------------------------------------------

// ListAllStripeCMD

// -------------------------------------------------------------------

// TransitionUpCMD

// .coordinator.TransitionUpCMD.MODE mode = 1;
inline void TransitionUpCMD::clear_mode() {
  mode_ = 0;
}
inline ::coordinator::TransitionUpCMD_MODE TransitionUpCMD::_internal_mode() const {
  return static_cast< ::coordinator::TransitionUpCMD_MODE >(mode_);
}
inline ::coordinator::TransitionUpCMD_MODE TransitionUpCMD::mode() const {
  // @@protoc_insertion_point(field_get:coordinator.TransitionUpCMD.mode)
  return _internal_mode();
}
inline void TransitionUpCMD::_internal_set_mode(::coordinator::TransitionUpCMD_MODE value) {
  
  mode_ = value;
}
inline void TransitionUpCMD::set_mode(::coordinator::TransitionUpCMD_MODE value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:coordinator.TransitionUpCMD.mode)
}

// int32 step = 2;
inline void TransitionUpCMD::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransitionUpCMD::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransitionUpCMD::step() const {
  // @@protoc_insertion_point(field_get:coordinator.TransitionUpCMD.step)
  return _internal_step();
}
inline void TransitionUpCMD::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void TransitionUpCMD::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:coordinator.TransitionUpCMD.step)
}

// bool doublegp = 3;
inline void TransitionUpCMD::clear_doublegp() {
  doublegp_ = false;
}
inline bool TransitionUpCMD::_internal_doublegp() const {
  return doublegp_;
}
inline bool TransitionUpCMD::doublegp() const {
  // @@protoc_insertion_point(field_get:coordinator.TransitionUpCMD.doublegp)
  return _internal_doublegp();
}
inline void TransitionUpCMD::_internal_set_doublegp(bool value) {
  
  doublegp_ = value;
}
inline void TransitionUpCMD::set_doublegp(bool value) {
  _internal_set_doublegp(value);
  // @@protoc_insertion_point(field_set:coordinator.TransitionUpCMD.doublegp)
}

// .coordinator.TransitionUpCMD.MATCH match = 4;
inline void TransitionUpCMD::clear_match() {
  match_ = 0;
}
inline ::coordinator::TransitionUpCMD_MATCH TransitionUpCMD::_internal_match() const {
  return static_cast< ::coordinator::TransitionUpCMD_MATCH >(match_);
}
inline ::coordinator::TransitionUpCMD_MATCH TransitionUpCMD::match() const {
  // @@protoc_insertion_point(field_get:coordinator.TransitionUpCMD.match)
  return _internal_match();
}
inline void TransitionUpCMD::_internal_set_match(::coordinator::TransitionUpCMD_MATCH value) {
  
  match_ = value;
}
inline void TransitionUpCMD::set_match(::coordinator::TransitionUpCMD_MATCH value) {
  _internal_set_match(value);
  // @@protoc_insertion_point(field_set:coordinator.TransitionUpCMD.match)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinator

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::coordinator::SetPlacementPolicyCMD_PLACE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::coordinator::SetPlacementPolicyCMD_PLACE>() {
  return ::coordinator::SetPlacementPolicyCMD_PLACE_descriptor();
}
template <> struct is_proto_enum< ::coordinator::TransitionUpCMD_MODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::coordinator::TransitionUpCMD_MODE>() {
  return ::coordinator::TransitionUpCMD_MODE_descriptor();
}
template <> struct is_proto_enum< ::coordinator::TransitionUpCMD_MATCH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::coordinator::TransitionUpCMD_MATCH>() {
  return ::coordinator::TransitionUpCMD_MATCH_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
