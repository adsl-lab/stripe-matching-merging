// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#include "coordinator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodesLocation_coordinator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeId_coordinator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeLocation_coordinator_2eproto;
namespace coordinator {
class StripeIdWithHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeIdWithHint> _instance;
} _StripeIdWithHint_default_instance_;
class NodesLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodesLocation> _instance;
} _NodesLocation_default_instance_;
class StripeIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeId> _instance;
} _StripeId_default_instance_;
class StripeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeInfo> _instance;
} _StripeInfo_default_instance_;
class StripeLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeLocation> _instance;
} _StripeLocation_default_instance_;
class StripeDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeDetail> _instance;
} _StripeDetail_default_instance_;
class SetPlacementPolicyCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPlacementPolicyCMD> _instance;
} _SetPlacementPolicyCMD_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class RequestResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResult> _instance;
} _RequestResult_default_instance_;
class ListAllStripeCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAllStripeCMD> _instance;
} _ListAllStripeCMD_default_instance_;
class TransitionUpCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransitionUpCMD> _instance;
} _TransitionUpCMD_default_instance_;
}  // namespace coordinator
static void InitDefaultsscc_info_ListAllStripeCMD_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_ListAllStripeCMD_default_instance_;
    new (ptr) ::coordinator::ListAllStripeCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::ListAllStripeCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAllStripeCMD_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAllStripeCMD_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_NodesLocation_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_NodesLocation_default_instance_;
    new (ptr) ::coordinator::NodesLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::NodesLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodesLocation_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodesLocation_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_Path_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_Path_default_instance_;
    new (ptr) ::coordinator::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Path_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RequestResult_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_RequestResult_default_instance_;
    new (ptr) ::coordinator::RequestResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::RequestResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestResult_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestResult_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_SetPlacementPolicyCMD_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_SetPlacementPolicyCMD_default_instance_;
    new (ptr) ::coordinator::SetPlacementPolicyCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::SetPlacementPolicyCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPlacementPolicyCMD_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPlacementPolicyCMD_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeDetail_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeDetail_default_instance_;
    new (ptr) ::coordinator::StripeDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StripeDetail_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StripeDetail_coordinator_2eproto}, {
      &scc_info_StripeLocation_coordinator_2eproto.base,
      &scc_info_StripeId_coordinator_2eproto.base,}};

static void InitDefaultsscc_info_StripeId_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeId_default_instance_;
    new (ptr) ::coordinator::StripeId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeId_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeId_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeIdWithHint_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeIdWithHint_default_instance_;
    new (ptr) ::coordinator::StripeIdWithHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeIdWithHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StripeIdWithHint_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StripeIdWithHint_coordinator_2eproto}, {
      &scc_info_StripeId_coordinator_2eproto.base,
      &scc_info_NodesLocation_coordinator_2eproto.base,}};

static void InitDefaultsscc_info_StripeInfo_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeInfo_default_instance_;
    new (ptr) ::coordinator::StripeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeInfo_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeInfo_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeLocation_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeLocation_default_instance_;
    new (ptr) ::coordinator::StripeLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeLocation_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeLocation_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_TransitionUpCMD_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_TransitionUpCMD_default_instance_;
    new (ptr) ::coordinator::TransitionUpCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::TransitionUpCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransitionUpCMD_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransitionUpCMD_coordinator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_coordinator_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_coordinator_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_coordinator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_coordinator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeIdWithHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeIdWithHint, stripeid_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeIdWithHint, badlocations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::NodesLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::NodesLocation, nodesuri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeId, stripeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripeid_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_k_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_l_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_g_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, blksize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, dataloc_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, localparityloc_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, globalparityloc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeDetail, stripelocation_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeDetail, stripeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::SetPlacementPolicyCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::SetPlacementPolicyCMD, place_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::Path, dstpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::RequestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::RequestResult, trueorfalse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::ListAllStripeCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::TransitionUpCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::TransitionUpCMD, mode_),
  PROTOBUF_FIELD_OFFSET(::coordinator::TransitionUpCMD, step_),
  PROTOBUF_FIELD_OFFSET(::coordinator::TransitionUpCMD, doublegp_),
  PROTOBUF_FIELD_OFFSET(::coordinator::TransitionUpCMD, match_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::coordinator::StripeIdWithHint)},
  { 7, -1, sizeof(::coordinator::NodesLocation)},
  { 13, -1, sizeof(::coordinator::StripeId)},
  { 19, -1, sizeof(::coordinator::StripeInfo)},
  { 29, -1, sizeof(::coordinator::StripeLocation)},
  { 37, -1, sizeof(::coordinator::StripeDetail)},
  { 44, -1, sizeof(::coordinator::SetPlacementPolicyCMD)},
  { 50, -1, sizeof(::coordinator::Path)},
  { 56, -1, sizeof(::coordinator::RequestResult)},
  { 62, -1, sizeof(::coordinator::ListAllStripeCMD)},
  { 67, -1, sizeof(::coordinator::TransitionUpCMD)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeIdWithHint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_NodesLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_SetPlacementPolicyCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_RequestResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_ListAllStripeCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_TransitionUpCMD_default_instance_),
};

const char descriptor_table_protodef_coordinator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021coordinator.proto\022\013coordinator\"m\n\020Stri"
  "peIdWithHint\022\'\n\010stripeid\030\001 \001(\0132\025.coordin"
  "ator.StripeId\0220\n\014badlocations\030\002 \001(\0132\032.co"
  "ordinator.NodesLocation\"!\n\rNodesLocation"
  "\022\020\n\010NodesUri\030\001 \003(\t\"\034\n\010StripeId\022\020\n\010stripe"
  "id\030\001 \001(\005\"e\n\nStripeInfo\022\020\n\010stripeid\030\001 \001(\005"
  "\022\020\n\010stripe_k\030\002 \001(\005\022\020\n\010stripe_l\030\003 \001(\005\022\020\n\010"
  "stripe_g\030\004 \001(\005\022\017\n\007blksize\030\005 \001(\005\"R\n\016Strip"
  "eLocation\022\017\n\007dataLoc\030\001 \003(\t\022\026\n\016localparit"
  "yLoc\030\002 \003(\t\022\027\n\017globalparityLoc\030\003 \003(\t\"l\n\014S"
  "tripeDetail\0223\n\016stripelocation\030\001 \001(\0132\033.co"
  "ordinator.StripeLocation\022\'\n\010stripeid\030\002 \001"
  "(\0132\025.coordinator.StripeId\"~\n\025SetPlacemen"
  "tPolicyCMD\0227\n\005place\030\001 \001(\0162(.coordinator."
  "SetPlacementPolicyCMD.PLACE\",\n\005PLACE\022\013\n\007"
  "COMPACT\020\000\022\n\n\006RANDOM\020\001\022\n\n\006SPARSE\020\002\"\027\n\004Pat"
  "h\022\017\n\007dstpath\030\001 \001(\t\"$\n\rRequestResult\022\023\n\013t"
  "rueorfalse\030\001 \001(\010\"\022\n\020ListAllStripeCMD\"\361\001\n"
  "\017TransitionUpCMD\022/\n\004mode\030\001 \001(\0162!.coordin"
  "ator.TransitionUpCMD.MODE\022\014\n\004step\030\002 \001(\005\022"
  "\020\n\010doublegp\030\003 \001(\010\0221\n\005match\030\004 \001(\0162\".coord"
  "inator.TransitionUpCMD.MATCH\"/\n\004MODE\022\t\n\005"
  "BASIC\020\000\022\016\n\nBASIC_PART\020\001\022\014\n\010DESIGNED\020\002\")\n"
  "\005MATCH\022\007\n\003SEQ\020\000\022\n\n\006RANDOM\020\001\022\013\n\007PERFECT\020\002"
  "2\247\006\n\nFileSystem\022:\n\tcreateDir\022\021.coordinat"
  "or.Path\032\032.coordinator.RequestResult\022B\n\014u"
  "ploadStripe\022\027.coordinator.StripeInfo\032\031.c"
  "oordinator.StripeDetail\022B\n\016downloadStrip"
  "e\022\025.coordinator.StripeId\032\031.coordinator.S"
  "tripeDetail\022T\n\026downloadStripeWithHint\022\035."
  "coordinator.StripeIdWithHint\032\033.coordinat"
  "or.StripeLocation\022A\n\014deleteStripe\022\025.coor"
  "dinator.StripeId\032\032.coordinator.RequestRe"
  "sult\022B\n\013uploadCheck\022\027.coordinator.Stripe"
  "Info\032\032.coordinator.RequestResult\022F\n\021repo"
  "rtblockupload\022\025.coordinator.StripeId\032\032.c"
  "oordinator.RequestResult\022@\n\nlistStripe\022\025"
  ".coordinator.StripeId\032\033.coordinator.Stri"
  "peLocation\022N\n\016listAllStripes\022\035.coordinat"
  "or.ListAllStripeCMD\032\033.coordinator.Stripe"
  "Location0\001\022H\n\014transitionup\022\034.coordinator"
  ".TransitionUpCMD\032\032.coordinator.RequestRe"
  "sult\022T\n\022setplacementpolicy\022\".coordinator"
  ".SetPlacementPolicyCMD\032\032.coordinator.Req"
  "uestResult2\016\n\014FromDataNodeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_coordinator_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_coordinator_2eproto_sccs[11] = {
  &scc_info_ListAllStripeCMD_coordinator_2eproto.base,
  &scc_info_NodesLocation_coordinator_2eproto.base,
  &scc_info_Path_coordinator_2eproto.base,
  &scc_info_RequestResult_coordinator_2eproto.base,
  &scc_info_SetPlacementPolicyCMD_coordinator_2eproto.base,
  &scc_info_StripeDetail_coordinator_2eproto.base,
  &scc_info_StripeId_coordinator_2eproto.base,
  &scc_info_StripeIdWithHint_coordinator_2eproto.base,
  &scc_info_StripeInfo_coordinator_2eproto.base,
  &scc_info_StripeLocation_coordinator_2eproto.base,
  &scc_info_TransitionUpCMD_coordinator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_coordinator_2eproto_once;
static bool descriptor_table_coordinator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_2eproto = {
  &descriptor_table_coordinator_2eproto_initialized, descriptor_table_protodef_coordinator_2eproto, "coordinator.proto", 1794,
  &descriptor_table_coordinator_2eproto_once, descriptor_table_coordinator_2eproto_sccs, descriptor_table_coordinator_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_coordinator_2eproto::offsets,
  file_level_metadata_coordinator_2eproto, 11, file_level_enum_descriptors_coordinator_2eproto, file_level_service_descriptors_coordinator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_coordinator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_coordinator_2eproto), true);
namespace coordinator {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPlacementPolicyCMD_PLACE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_coordinator_2eproto);
  return file_level_enum_descriptors_coordinator_2eproto[0];
}
bool SetPlacementPolicyCMD_PLACE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD::COMPACT;
constexpr SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD::RANDOM;
constexpr SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD::SPARSE;
constexpr SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD::PLACE_MIN;
constexpr SetPlacementPolicyCMD_PLACE SetPlacementPolicyCMD::PLACE_MAX;
constexpr int SetPlacementPolicyCMD::PLACE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionUpCMD_MODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_coordinator_2eproto);
  return file_level_enum_descriptors_coordinator_2eproto[1];
}
bool TransitionUpCMD_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransitionUpCMD_MODE TransitionUpCMD::BASIC;
constexpr TransitionUpCMD_MODE TransitionUpCMD::BASIC_PART;
constexpr TransitionUpCMD_MODE TransitionUpCMD::DESIGNED;
constexpr TransitionUpCMD_MODE TransitionUpCMD::MODE_MIN;
constexpr TransitionUpCMD_MODE TransitionUpCMD::MODE_MAX;
constexpr int TransitionUpCMD::MODE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionUpCMD_MATCH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_coordinator_2eproto);
  return file_level_enum_descriptors_coordinator_2eproto[2];
}
bool TransitionUpCMD_MATCH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransitionUpCMD_MATCH TransitionUpCMD::SEQ;
constexpr TransitionUpCMD_MATCH TransitionUpCMD::RANDOM;
constexpr TransitionUpCMD_MATCH TransitionUpCMD::PERFECT;
constexpr TransitionUpCMD_MATCH TransitionUpCMD::MATCH_MIN;
constexpr TransitionUpCMD_MATCH TransitionUpCMD::MATCH_MAX;
constexpr int TransitionUpCMD::MATCH_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StripeIdWithHint::InitAsDefaultInstance() {
  ::coordinator::_StripeIdWithHint_default_instance_._instance.get_mutable()->stripeid_ = const_cast< ::coordinator::StripeId*>(
      ::coordinator::StripeId::internal_default_instance());
  ::coordinator::_StripeIdWithHint_default_instance_._instance.get_mutable()->badlocations_ = const_cast< ::coordinator::NodesLocation*>(
      ::coordinator::NodesLocation::internal_default_instance());
}
class StripeIdWithHint::_Internal {
 public:
  static const ::coordinator::StripeId& stripeid(const StripeIdWithHint* msg);
  static const ::coordinator::NodesLocation& badlocations(const StripeIdWithHint* msg);
};

const ::coordinator::StripeId&
StripeIdWithHint::_Internal::stripeid(const StripeIdWithHint* msg) {
  return *msg->stripeid_;
}
const ::coordinator::NodesLocation&
StripeIdWithHint::_Internal::badlocations(const StripeIdWithHint* msg) {
  return *msg->badlocations_;
}
StripeIdWithHint::StripeIdWithHint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeIdWithHint)
}
StripeIdWithHint::StripeIdWithHint(const StripeIdWithHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stripeid()) {
    stripeid_ = new ::coordinator::StripeId(*from.stripeid_);
  } else {
    stripeid_ = nullptr;
  }
  if (from._internal_has_badlocations()) {
    badlocations_ = new ::coordinator::NodesLocation(*from.badlocations_);
  } else {
    badlocations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeIdWithHint)
}

void StripeIdWithHint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripeIdWithHint_coordinator_2eproto.base);
  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&badlocations_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(badlocations_));
}

StripeIdWithHint::~StripeIdWithHint() {
  // @@protoc_insertion_point(destructor:coordinator.StripeIdWithHint)
  SharedDtor();
}

void StripeIdWithHint::SharedDtor() {
  if (this != internal_default_instance()) delete stripeid_;
  if (this != internal_default_instance()) delete badlocations_;
}

void StripeIdWithHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeIdWithHint& StripeIdWithHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeIdWithHint_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeIdWithHint::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeIdWithHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stripeid_ != nullptr) {
    delete stripeid_;
  }
  stripeid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && badlocations_ != nullptr) {
    delete badlocations_;
  }
  badlocations_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StripeIdWithHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .coordinator.StripeId stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stripeid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .coordinator.NodesLocation badlocations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_badlocations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeIdWithHint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeIdWithHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .coordinator.StripeId stripeid = 1;
  if (this->has_stripeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stripeid(this), target, stream);
  }

  // .coordinator.NodesLocation badlocations = 2;
  if (this->has_badlocations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::badlocations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeIdWithHint)
  return target;
}

size_t StripeIdWithHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeIdWithHint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .coordinator.StripeId stripeid = 1;
  if (this->has_stripeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stripeid_);
  }

  // .coordinator.NodesLocation badlocations = 2;
  if (this->has_badlocations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *badlocations_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeIdWithHint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeIdWithHint)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeIdWithHint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeIdWithHint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeIdWithHint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeIdWithHint)
    MergeFrom(*source);
  }
}

void StripeIdWithHint::MergeFrom(const StripeIdWithHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeIdWithHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stripeid()) {
    _internal_mutable_stripeid()->::coordinator::StripeId::MergeFrom(from._internal_stripeid());
  }
  if (from.has_badlocations()) {
    _internal_mutable_badlocations()->::coordinator::NodesLocation::MergeFrom(from._internal_badlocations());
  }
}

void StripeIdWithHint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeIdWithHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeIdWithHint::CopyFrom(const StripeIdWithHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeIdWithHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeIdWithHint::IsInitialized() const {
  return true;
}

void StripeIdWithHint::InternalSwap(StripeIdWithHint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
  swap(badlocations_, other->badlocations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeIdWithHint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodesLocation::InitAsDefaultInstance() {
}
class NodesLocation::_Internal {
 public:
};

NodesLocation::NodesLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.NodesLocation)
}
NodesLocation::NodesLocation(const NodesLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodesuri_(from.nodesuri_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coordinator.NodesLocation)
}

void NodesLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodesLocation_coordinator_2eproto.base);
}

NodesLocation::~NodesLocation() {
  // @@protoc_insertion_point(destructor:coordinator.NodesLocation)
  SharedDtor();
}

void NodesLocation::SharedDtor() {
}

void NodesLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodesLocation& NodesLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodesLocation_coordinator_2eproto.base);
  return *internal_default_instance();
}


void NodesLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.NodesLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodesuri_.Clear();
  _internal_metadata_.Clear();
}

const char* NodesLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string NodesUri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nodesuri();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.NodesLocation.NodesUri"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodesLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.NodesLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string NodesUri = 1;
  for (int i = 0, n = this->_internal_nodesuri_size(); i < n; i++) {
    const auto& s = this->_internal_nodesuri(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.NodesLocation.NodesUri");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.NodesLocation)
  return target;
}

size_t NodesLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.NodesLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string NodesUri = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(nodesuri_.size());
  for (int i = 0, n = nodesuri_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      nodesuri_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodesLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.NodesLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const NodesLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodesLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.NodesLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.NodesLocation)
    MergeFrom(*source);
  }
}

void NodesLocation::MergeFrom(const NodesLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.NodesLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodesuri_.MergeFrom(from.nodesuri_);
}

void NodesLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.NodesLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesLocation::CopyFrom(const NodesLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.NodesLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesLocation::IsInitialized() const {
  return true;
}

void NodesLocation::InternalSwap(NodesLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodesuri_.InternalSwap(&other->nodesuri_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodesLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeId::InitAsDefaultInstance() {
}
class StripeId::_Internal {
 public:
};

StripeId::StripeId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeId)
}
StripeId::StripeId(const StripeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stripeid_ = from.stripeid_;
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeId)
}

void StripeId::SharedCtor() {
  stripeid_ = 0;
}

StripeId::~StripeId() {
  // @@protoc_insertion_point(destructor:coordinator.StripeId)
  SharedDtor();
}

void StripeId::SharedDtor() {
}

void StripeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeId& StripeId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeId_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeId::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stripeid_ = 0;
  _internal_metadata_.Clear();
}

const char* StripeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeId)
  return target;
}

size_t StripeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeId)
    MergeFrom(*source);
  }
}

void StripeId::MergeFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
}

void StripeId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeId::CopyFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeId::IsInitialized() const {
  return true;
}

void StripeId::InternalSwap(StripeId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeInfo::InitAsDefaultInstance() {
}
class StripeInfo::_Internal {
 public:
};

StripeInfo::StripeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeInfo)
}
StripeInfo::StripeInfo(const StripeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stripeid_, &from.stripeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&blksize_) -
    reinterpret_cast<char*>(&stripeid_)) + sizeof(blksize_));
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeInfo)
}

void StripeInfo::SharedCtor() {
  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blksize_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(blksize_));
}

StripeInfo::~StripeInfo() {
  // @@protoc_insertion_point(destructor:coordinator.StripeInfo)
  SharedDtor();
}

void StripeInfo::SharedDtor() {
}

void StripeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeInfo& StripeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeInfo_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blksize_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(blksize_));
  _internal_metadata_.Clear();
}

const char* StripeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stripe_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stripe_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stripe_g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blksize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          blksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  // int32 stripe_k = 2;
  if (this->stripe_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stripe_k(), target);
  }

  // int32 stripe_l = 3;
  if (this->stripe_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stripe_l(), target);
  }

  // int32 stripe_g = 4;
  if (this->stripe_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stripe_g(), target);
  }

  // int32 blksize = 5;
  if (this->blksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_blksize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeInfo)
  return target;
}

size_t StripeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  // int32 stripe_k = 2;
  if (this->stripe_k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_k());
  }

  // int32 stripe_l = 3;
  if (this->stripe_l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_l());
  }

  // int32 stripe_g = 4;
  if (this->stripe_g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_g());
  }

  // int32 blksize = 5;
  if (this->blksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blksize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeInfo)
    MergeFrom(*source);
  }
}

void StripeInfo::MergeFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
  if (from.stripe_k() != 0) {
    _internal_set_stripe_k(from._internal_stripe_k());
  }
  if (from.stripe_l() != 0) {
    _internal_set_stripe_l(from._internal_stripe_l());
  }
  if (from.stripe_g() != 0) {
    _internal_set_stripe_g(from._internal_stripe_g());
  }
  if (from.blksize() != 0) {
    _internal_set_blksize(from._internal_blksize());
  }
}

void StripeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeInfo::CopyFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeInfo::IsInitialized() const {
  return true;
}

void StripeInfo::InternalSwap(StripeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
  swap(stripe_k_, other->stripe_k_);
  swap(stripe_l_, other->stripe_l_);
  swap(stripe_g_, other->stripe_g_);
  swap(blksize_, other->blksize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeLocation::InitAsDefaultInstance() {
}
class StripeLocation::_Internal {
 public:
};

StripeLocation::StripeLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeLocation)
}
StripeLocation::StripeLocation(const StripeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dataloc_(from.dataloc_),
      localparityloc_(from.localparityloc_),
      globalparityloc_(from.globalparityloc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeLocation)
}

void StripeLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripeLocation_coordinator_2eproto.base);
}

StripeLocation::~StripeLocation() {
  // @@protoc_insertion_point(destructor:coordinator.StripeLocation)
  SharedDtor();
}

void StripeLocation::SharedDtor() {
}

void StripeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeLocation& StripeLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeLocation_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataloc_.Clear();
  localparityloc_.Clear();
  globalparityloc_.Clear();
  _internal_metadata_.Clear();
}

const char* StripeLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dataLoc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.StripeLocation.dataLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string localparityLoc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_localparityloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.StripeLocation.localparityLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string globalparityLoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_globalparityloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.StripeLocation.globalparityLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataLoc = 1;
  for (int i = 0, n = this->_internal_dataloc_size(); i < n; i++) {
    const auto& s = this->_internal_dataloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.StripeLocation.dataLoc");
    target = stream->WriteString(1, s, target);
  }

  // repeated string localparityLoc = 2;
  for (int i = 0, n = this->_internal_localparityloc_size(); i < n; i++) {
    const auto& s = this->_internal_localparityloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.StripeLocation.localparityLoc");
    target = stream->WriteString(2, s, target);
  }

  // repeated string globalparityLoc = 3;
  for (int i = 0, n = this->_internal_globalparityloc_size(); i < n; i++) {
    const auto& s = this->_internal_globalparityloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.StripeLocation.globalparityLoc");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeLocation)
  return target;
}

size_t StripeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataLoc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataloc_.size());
  for (int i = 0, n = dataloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataloc_.Get(i));
  }

  // repeated string localparityLoc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(localparityloc_.size());
  for (int i = 0, n = localparityloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      localparityloc_.Get(i));
  }

  // repeated string globalparityLoc = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(globalparityloc_.size());
  for (int i = 0, n = globalparityloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      globalparityloc_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeLocation)
    MergeFrom(*source);
  }
}

void StripeLocation::MergeFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataloc_.MergeFrom(from.dataloc_);
  localparityloc_.MergeFrom(from.localparityloc_);
  globalparityloc_.MergeFrom(from.globalparityloc_);
}

void StripeLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeLocation::CopyFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeLocation::IsInitialized() const {
  return true;
}

void StripeLocation::InternalSwap(StripeLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dataloc_.InternalSwap(&other->dataloc_);
  localparityloc_.InternalSwap(&other->localparityloc_);
  globalparityloc_.InternalSwap(&other->globalparityloc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeDetail::InitAsDefaultInstance() {
  ::coordinator::_StripeDetail_default_instance_._instance.get_mutable()->stripelocation_ = const_cast< ::coordinator::StripeLocation*>(
      ::coordinator::StripeLocation::internal_default_instance());
  ::coordinator::_StripeDetail_default_instance_._instance.get_mutable()->stripeid_ = const_cast< ::coordinator::StripeId*>(
      ::coordinator::StripeId::internal_default_instance());
}
class StripeDetail::_Internal {
 public:
  static const ::coordinator::StripeLocation& stripelocation(const StripeDetail* msg);
  static const ::coordinator::StripeId& stripeid(const StripeDetail* msg);
};

const ::coordinator::StripeLocation&
StripeDetail::_Internal::stripelocation(const StripeDetail* msg) {
  return *msg->stripelocation_;
}
const ::coordinator::StripeId&
StripeDetail::_Internal::stripeid(const StripeDetail* msg) {
  return *msg->stripeid_;
}
StripeDetail::StripeDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeDetail)
}
StripeDetail::StripeDetail(const StripeDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stripelocation()) {
    stripelocation_ = new ::coordinator::StripeLocation(*from.stripelocation_);
  } else {
    stripelocation_ = nullptr;
  }
  if (from._internal_has_stripeid()) {
    stripeid_ = new ::coordinator::StripeId(*from.stripeid_);
  } else {
    stripeid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeDetail)
}

void StripeDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripeDetail_coordinator_2eproto.base);
  ::memset(&stripelocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripeid_) -
      reinterpret_cast<char*>(&stripelocation_)) + sizeof(stripeid_));
}

StripeDetail::~StripeDetail() {
  // @@protoc_insertion_point(destructor:coordinator.StripeDetail)
  SharedDtor();
}

void StripeDetail::SharedDtor() {
  if (this != internal_default_instance()) delete stripelocation_;
  if (this != internal_default_instance()) delete stripeid_;
}

void StripeDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeDetail& StripeDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeDetail_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stripelocation_ != nullptr) {
    delete stripelocation_;
  }
  stripelocation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stripeid_ != nullptr) {
    delete stripeid_;
  }
  stripeid_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StripeDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .coordinator.StripeLocation stripelocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stripelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .coordinator.StripeId stripeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stripeid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .coordinator.StripeLocation stripelocation = 1;
  if (this->has_stripelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stripelocation(this), target, stream);
  }

  // .coordinator.StripeId stripeid = 2;
  if (this->has_stripeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stripeid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeDetail)
  return target;
}

size_t StripeDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .coordinator.StripeLocation stripelocation = 1;
  if (this->has_stripelocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stripelocation_);
  }

  // .coordinator.StripeId stripeid = 2;
  if (this->has_stripeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stripeid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeDetail)
    MergeFrom(*source);
  }
}

void StripeDetail::MergeFrom(const StripeDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stripelocation()) {
    _internal_mutable_stripelocation()->::coordinator::StripeLocation::MergeFrom(from._internal_stripelocation());
  }
  if (from.has_stripeid()) {
    _internal_mutable_stripeid()->::coordinator::StripeId::MergeFrom(from._internal_stripeid());
  }
}

void StripeDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeDetail::CopyFrom(const StripeDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeDetail::IsInitialized() const {
  return true;
}

void StripeDetail::InternalSwap(StripeDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripelocation_, other->stripelocation_);
  swap(stripeid_, other->stripeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPlacementPolicyCMD::InitAsDefaultInstance() {
}
class SetPlacementPolicyCMD::_Internal {
 public:
};

SetPlacementPolicyCMD::SetPlacementPolicyCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.SetPlacementPolicyCMD)
}
SetPlacementPolicyCMD::SetPlacementPolicyCMD(const SetPlacementPolicyCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  place_ = from.place_;
  // @@protoc_insertion_point(copy_constructor:coordinator.SetPlacementPolicyCMD)
}

void SetPlacementPolicyCMD::SharedCtor() {
  place_ = 0;
}

SetPlacementPolicyCMD::~SetPlacementPolicyCMD() {
  // @@protoc_insertion_point(destructor:coordinator.SetPlacementPolicyCMD)
  SharedDtor();
}

void SetPlacementPolicyCMD::SharedDtor() {
}

void SetPlacementPolicyCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPlacementPolicyCMD& SetPlacementPolicyCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPlacementPolicyCMD_coordinator_2eproto.base);
  return *internal_default_instance();
}


void SetPlacementPolicyCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.SetPlacementPolicyCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  place_ = 0;
  _internal_metadata_.Clear();
}

const char* SetPlacementPolicyCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .coordinator.SetPlacementPolicyCMD.PLACE place = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_place(static_cast<::coordinator::SetPlacementPolicyCMD_PLACE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPlacementPolicyCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.SetPlacementPolicyCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .coordinator.SetPlacementPolicyCMD.PLACE place = 1;
  if (this->place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_place(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.SetPlacementPolicyCMD)
  return target;
}

size_t SetPlacementPolicyCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.SetPlacementPolicyCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .coordinator.SetPlacementPolicyCMD.PLACE place = 1;
  if (this->place() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPlacementPolicyCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.SetPlacementPolicyCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPlacementPolicyCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPlacementPolicyCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.SetPlacementPolicyCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.SetPlacementPolicyCMD)
    MergeFrom(*source);
  }
}

void SetPlacementPolicyCMD::MergeFrom(const SetPlacementPolicyCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.SetPlacementPolicyCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.place() != 0) {
    _internal_set_place(from._internal_place());
  }
}

void SetPlacementPolicyCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.SetPlacementPolicyCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlacementPolicyCMD::CopyFrom(const SetPlacementPolicyCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.SetPlacementPolicyCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlacementPolicyCMD::IsInitialized() const {
  return true;
}

void SetPlacementPolicyCMD::InternalSwap(SetPlacementPolicyCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(place_, other->place_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPlacementPolicyCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstpath().empty()) {
    dstpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dstpath_);
  }
  // @@protoc_insertion_point(copy_constructor:coordinator.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_coordinator_2eproto.base);
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:coordinator.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_coordinator_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dstpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dstpath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.Path.dstpath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dstpath = 1;
  if (this->dstpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.Path.dstpath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dstpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dstpath = 1;
  if (this->dstpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dstpath().size() > 0) {

    dstpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dstpath_);
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestResult::InitAsDefaultInstance() {
}
class RequestResult::_Internal {
 public:
};

RequestResult::RequestResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.RequestResult)
}
RequestResult::RequestResult(const RequestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trueorfalse_ = from.trueorfalse_;
  // @@protoc_insertion_point(copy_constructor:coordinator.RequestResult)
}

void RequestResult::SharedCtor() {
  trueorfalse_ = false;
}

RequestResult::~RequestResult() {
  // @@protoc_insertion_point(destructor:coordinator.RequestResult)
  SharedDtor();
}

void RequestResult::SharedDtor() {
}

void RequestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResult& RequestResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResult_coordinator_2eproto.base);
  return *internal_default_instance();
}


void RequestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trueorfalse_ = false;
  _internal_metadata_.Clear();
}

const char* RequestResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool trueorfalse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trueorfalse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_trueorfalse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.RequestResult)
  return target;
}

size_t RequestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.RequestResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.RequestResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.RequestResult)
    MergeFrom(*source);
  }
}

void RequestResult::MergeFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trueorfalse() != 0) {
    _internal_set_trueorfalse(from._internal_trueorfalse());
  }
}

void RequestResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResult::CopyFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResult::IsInitialized() const {
  return true;
}

void RequestResult::InternalSwap(RequestResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trueorfalse_, other->trueorfalse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAllStripeCMD::InitAsDefaultInstance() {
}
class ListAllStripeCMD::_Internal {
 public:
};

ListAllStripeCMD::ListAllStripeCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.ListAllStripeCMD)
}
ListAllStripeCMD::ListAllStripeCMD(const ListAllStripeCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coordinator.ListAllStripeCMD)
}

void ListAllStripeCMD::SharedCtor() {
}

ListAllStripeCMD::~ListAllStripeCMD() {
  // @@protoc_insertion_point(destructor:coordinator.ListAllStripeCMD)
  SharedDtor();
}

void ListAllStripeCMD::SharedDtor() {
}

void ListAllStripeCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAllStripeCMD& ListAllStripeCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAllStripeCMD_coordinator_2eproto.base);
  return *internal_default_instance();
}


void ListAllStripeCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.ListAllStripeCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListAllStripeCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAllStripeCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.ListAllStripeCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.ListAllStripeCMD)
  return target;
}

size_t ListAllStripeCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.ListAllStripeCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAllStripeCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.ListAllStripeCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAllStripeCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAllStripeCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.ListAllStripeCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.ListAllStripeCMD)
    MergeFrom(*source);
  }
}

void ListAllStripeCMD::MergeFrom(const ListAllStripeCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.ListAllStripeCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListAllStripeCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.ListAllStripeCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAllStripeCMD::CopyFrom(const ListAllStripeCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.ListAllStripeCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAllStripeCMD::IsInitialized() const {
  return true;
}

void ListAllStripeCMD::InternalSwap(ListAllStripeCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAllStripeCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransitionUpCMD::InitAsDefaultInstance() {
}
class TransitionUpCMD::_Internal {
 public:
};

TransitionUpCMD::TransitionUpCMD()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.TransitionUpCMD)
}
TransitionUpCMD::TransitionUpCMD(const TransitionUpCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(match_));
  // @@protoc_insertion_point(copy_constructor:coordinator.TransitionUpCMD)
}

void TransitionUpCMD::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(match_));
}

TransitionUpCMD::~TransitionUpCMD() {
  // @@protoc_insertion_point(destructor:coordinator.TransitionUpCMD)
  SharedDtor();
}

void TransitionUpCMD::SharedDtor() {
}

void TransitionUpCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitionUpCMD& TransitionUpCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransitionUpCMD_coordinator_2eproto.base);
  return *internal_default_instance();
}


void TransitionUpCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.TransitionUpCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(match_));
  _internal_metadata_.Clear();
}

const char* TransitionUpCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .coordinator.TransitionUpCMD.MODE mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::coordinator::TransitionUpCMD_MODE>(val));
        } else goto handle_unusual;
        continue;
      // int32 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool doublegp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          doublegp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .coordinator.TransitionUpCMD.MATCH match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_match(static_cast<::coordinator::TransitionUpCMD_MATCH>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransitionUpCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.TransitionUpCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .coordinator.TransitionUpCMD.MODE mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // int32 step = 2;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_step(), target);
  }

  // bool doublegp = 3;
  if (this->doublegp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_doublegp(), target);
  }

  // .coordinator.TransitionUpCMD.MATCH match = 4;
  if (this->match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.TransitionUpCMD)
  return target;
}

size_t TransitionUpCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.TransitionUpCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .coordinator.TransitionUpCMD.MODE mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // int32 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  // bool doublegp = 3;
  if (this->doublegp() != 0) {
    total_size += 1 + 1;
  }

  // .coordinator.TransitionUpCMD.MATCH match = 4;
  if (this->match() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitionUpCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.TransitionUpCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const TransitionUpCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransitionUpCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.TransitionUpCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.TransitionUpCMD)
    MergeFrom(*source);
  }
}

void TransitionUpCMD::MergeFrom(const TransitionUpCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.TransitionUpCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (from.doublegp() != 0) {
    _internal_set_doublegp(from._internal_doublegp());
  }
  if (from.match() != 0) {
    _internal_set_match(from._internal_match());
  }
}

void TransitionUpCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.TransitionUpCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitionUpCMD::CopyFrom(const TransitionUpCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.TransitionUpCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionUpCMD::IsInitialized() const {
  return true;
}

void TransitionUpCMD::InternalSwap(TransitionUpCMD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mode_, other->mode_);
  swap(step_, other->step_);
  swap(doublegp_, other->doublegp_);
  swap(match_, other->match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionUpCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace coordinator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::coordinator::StripeIdWithHint* Arena::CreateMaybeMessage< ::coordinator::StripeIdWithHint >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeIdWithHint >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::NodesLocation* Arena::CreateMaybeMessage< ::coordinator::NodesLocation >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::NodesLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeId* Arena::CreateMaybeMessage< ::coordinator::StripeId >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeId >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeInfo* Arena::CreateMaybeMessage< ::coordinator::StripeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeLocation* Arena::CreateMaybeMessage< ::coordinator::StripeLocation >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeDetail* Arena::CreateMaybeMessage< ::coordinator::StripeDetail >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::SetPlacementPolicyCMD* Arena::CreateMaybeMessage< ::coordinator::SetPlacementPolicyCMD >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::SetPlacementPolicyCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::Path* Arena::CreateMaybeMessage< ::coordinator::Path >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::RequestResult* Arena::CreateMaybeMessage< ::coordinator::RequestResult >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::RequestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::ListAllStripeCMD* Arena::CreateMaybeMessage< ::coordinator::ListAllStripeCMD >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::ListAllStripeCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::TransitionUpCMD* Arena::CreateMaybeMessage< ::coordinator::TransitionUpCMD >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::TransitionUpCMD >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
